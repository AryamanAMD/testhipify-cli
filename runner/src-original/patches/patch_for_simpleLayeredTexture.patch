diff --git a/src/samples/Samples/0_Introduction/clock_nvrtc/clock_hipified.cpp b/src/samples/Samples/0_Introduction/clock_nvrtc/clock_hipified.cpp
index ead0dce..0871966 100644
--- a/src/samples/Samples/0_Introduction/clock_nvrtc/clock_hipified.cpp
+++ b/src/samples/Samples/0_Introduction/clock_nvrtc/clock_hipified.cpp
@@ -40,7 +40,7 @@
 
 #include <hip/hip_runtime.h>
 #include <nvrtc_helper.h>
-
+#include "HIPCHECK.h"
 // helper functions and utilities to work with CUDA
 #include "helper_functions.h"
 
@@ -93,20 +93,20 @@ int main(int argc, char **argv) {
   hipModule_t module = loadCUBIN(cubin, argc, argv);
   hipFunction_t kernel_addr;
 
-  checkCudaErrors(hipModuleGetFunction(&kernel_addr, module, "timedReduction"));
+  HIPCHECK(hipModuleGetFunction(&kernel_addr, module, "timedReduction"));
 
   dim3 cudaBlockSize(NUM_THREADS, 1, 1);
   dim3 cudaGridSize(NUM_BLOCKS, 1, 1);
 
   hipDeviceptr_t dinput, doutput, dtimer;
-  checkCudaErrors(hipMalloc(&dinput, sizeof(float) * NUM_THREADS * 2));
-  checkCudaErrors(hipMalloc(&doutput, sizeof(float) * NUM_BLOCKS));
-  checkCudaErrors(hipMalloc(&dtimer, sizeof(clock_t) * NUM_BLOCKS * 2));
-  checkCudaErrors(hipMemcpyHtoD(dinput, input, sizeof(float) * NUM_THREADS * 2));
+  HIPCHECK(hipMalloc(&dinput, sizeof(float) * NUM_THREADS * 2));
+  HIPCHECK(hipMalloc(&doutput, sizeof(float) * NUM_BLOCKS));
+  HIPCHECK(hipMalloc(&dtimer, sizeof(clock_t) * NUM_BLOCKS * 2));
+  HIPCHECK(hipMemcpyHtoD(dinput, input, sizeof(float) * NUM_THREADS * 2));
 
   void *arr[] = {(void *)&dinput, (void *)&doutput, (void *)&dtimer};
 
-  checkCudaErrors(hipModuleLaunchKernel(
+  HIPCHECK(hipModuleLaunchKernel(
       kernel_addr, cudaGridSize.x, cudaGridSize.y,
       cudaGridSize.z,                                    /* grid dim */
       cudaBlockSize.x, cudaBlockSize.y, cudaBlockSize.z, /* block dim */
@@ -114,12 +114,12 @@ int main(int argc, char **argv) {
       &arr[0],                            /* arguments */
       0));
 
-  checkCudaErrors(hipCtxSynchronize());
-  checkCudaErrors(
+  HIPCHECK(hipCtxSynchronize());
+  HIPCHECK(
       hipMemcpyDtoH(timer, dtimer, sizeof(clock_t) * NUM_BLOCKS * 2));
-  checkCudaErrors(hipFree(dinput));
-  checkCudaErrors(hipFree(doutput));
-  checkCudaErrors(hipFree(dtimer));
+  HIPCHECK(hipFree(dinput));
+  HIPCHECK(hipFree(doutput));
+  HIPCHECK(hipFree(dtimer));
 
   long double avgElapsedClocks = 0;
 
diff --git a/src/samples/Samples/0_Introduction/clock_nvrtc/clock_kernel.cu.hip b/src/samples/Samples/0_Introduction/clock_nvrtc/clock_kernel.cu.hip
index 0ef5507..e02229a 100644
--- a/src/samples/Samples/0_Introduction/clock_nvrtc/clock_kernel.cu.hip
+++ b/src/samples/Samples/0_Introduction/clock_nvrtc/clock_kernel.cu.hip
@@ -1,5 +1,4 @@
 
-#include <hip/hip_runtime.h>
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
diff --git a/src/samples/Samples/0_Introduction/simpleLayeredTexture/simpleLayeredTexture.cu.hip b/src/samples/Samples/0_Introduction/simpleLayeredTexture/simpleLayeredTexture.cu.hip
index a08cf9a..c509694 100644
--- a/src/samples/Samples/0_Introduction/simpleLayeredTexture/simpleLayeredTexture.cu.hip
+++ b/src/samples/Samples/0_Introduction/simpleLayeredTexture/simpleLayeredTexture.cu.hip
@@ -47,8 +47,8 @@
 #include <hip/hip_runtime.h>
 
 // includes, project
-#include <helper_cuda.h>
-#include <helper_functions.h>  // helper for shared that are common to CUDA Samples
+#include "helper_cuda_hipified.h"
+#include "helper_functions.h"  // helper for shared that are common to CUDA Samples
 
 static const char *sSDKname = "simpleLayeredTexture";
 
diff --git a/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVoteIntrinsics.cu.hip b/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVoteIntrinsics.cu.hip
index 7bc8a48..bd26310 100644
--- a/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVoteIntrinsics.cu.hip
+++ b/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVoteIntrinsics.cu.hip
@@ -37,7 +37,7 @@
 // helper functions and utilities to work with CUDA
 #include "helper_cuda_hipified.h"
 #include "helper_functions.h"
-
+//#include <hipify/__clang_cuda_intrinsics.h>
 #ifndef MAX
 #define MAX(a, b) (a > b ? a : b)
 #endif
diff --git a/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVote_kernel_hipified_hipified.cuh b/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVote_kernel_hipified_hipified.cuh
deleted file mode 100644
index 0960ce8..0000000
--- a/src/samples/Samples/0_Introduction/simpleVoteIntrinsics/simpleVote_kernel_hipified_hipified.cuh
+++ /dev/null
@@ -1,82 +0,0 @@
-#include "hip/hip_runtime.h"
-#include "hip/hip_runtime.h"
-/* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *  * Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *  * Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *  * Neither the name of NVIDIA CORPORATION nor the names of its
- *    contributors may be used to endorse or promote products derived
- *    from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef SIMPLEVOTE_KERNEL_CU
-#define SIMPLEVOTE_KERNEL_CU
-
-////////////////////////////////////////////////////////////////////////////////
-// Vote Any/All intrinsic kernel function tests are supported only by CUDA
-// capable devices that are CUDA hardware that has SM1.2 or later
-// Vote Functions (refer to section 4.4.5 in the CUDA Programming Guide)
-////////////////////////////////////////////////////////////////////////////////
-
-// Kernel #1 tests the across-the-warp vote(any) intrinsic.
-// If ANY one of the threads (within the warp) of the predicated condition
-// returns a non-zero value, then all threads within this warp will return a
-// non-zero value
-__global__ void VoteAnyKernel1(unsigned int *input, unsigned int *result,
-                               int size) {
-  int tx = threadIdx.x;
-
-  int mask = 0xffffffff;
-  result[tx] = __any_sync(mask, input[tx]);
-}
-
-// Kernel #2 tests the across-the-warp vote(all) intrinsic.
-// If ALL of the threads (within the warp) of the predicated condition returns
-// a non-zero value, then all threads within this warp will return a non-zero
-// value
-__global__ void VoteAllKernel2(unsigned int *input, unsigned int *result,
-                               int size) {
-  int tx = threadIdx.x;
-
-  int mask = 0xffffffff;
-  result[tx] = __all_sync(mask, input[tx]);
-}
-
-// Kernel #3 is a directed test for the across-the-warp vote(all) intrinsic.
-// This kernel will test for conditions across warps, and within half warps
-__global__ void VoteAnyKernel3(bool *info, int warp_size) {
-  int tx = threadIdx.x;
-  unsigned int mask = 0xffffffff;
-  bool *offs = info + (tx * 3);
-
-  // The following should hold true for the second and third warp
-  *offs = __any_sync(mask, (tx >= (warp_size * 3) / 2));
-  // The following should hold true for the "upper half" of the second warp,
-  // and all of the third warp
-  *(offs + 1) = (tx >= (warp_size * 3) / 2 ? true : false);
-
-  // The following should hold true for the third warp only
-  if (__all_sync(mask, (tx >= (warp_size * 3) / 2))) {
-    *(offs + 2) = true;
-  }
-}
-
-#endif
