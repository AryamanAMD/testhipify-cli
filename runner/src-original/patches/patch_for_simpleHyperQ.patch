diff --git a/src/samples/Samples/0_Introduction/simpleHyperQ/simpleHyperQ.cu.hip b/src/samples/Samples/0_Introduction/simpleHyperQ/simpleHyperQ.cu.hip
index e69de29..9cb206f 100644
--- a/src/samples/Samples/0_Introduction/simpleHyperQ/simpleHyperQ.cu.hip
+++ b/src/samples/Samples/0_Introduction/simpleHyperQ/simpleHyperQ.cu.hip
@@ -0,0 +1,232 @@
+#include "hip/hip_runtime.h"
+/* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *  * Neither the name of NVIDIA CORPORATION nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+//
+// This sample demonstrates how HyperQ allows supporting devices to avoid false
+// dependencies between kernels in different streams.
+//
+// - Devices without HyperQ will run a maximum of two kernels at a time (one
+//   kernel_A and one kernel_B).
+// - Devices with HyperQ will run up to 32 kernels simultaneously.
+
+#include <hip/hip_cooperative_groups.h>
+#include <stdio.h>
+
+namespace cg = cooperative_groups;
+#include "helper_cuda_hipified.h"
+#include "helper_functions.h"
+
+const char *sSDKsample = "hyperQ";
+
+// This subroutine does no real work but runs for at least the specified number
+// of clock ticks.
+__device__ void clock_block(clock_t *d_o, clock_t clock_count) {
+  unsigned int start_clock = (unsigned int)clock();
+
+  clock_t clock_offset = 0;
+
+  while (clock_offset < clock_count) {
+    unsigned int end_clock = (unsigned int)clock();
+
+    // The code below should work like
+    // this (thanks to modular arithmetics):
+    //
+    // clock_offset = (clock_t) (end_clock > start_clock ?
+    //                           end_clock - start_clock :
+    //                           end_clock + (0xffffffffu - start_clock));
+    //
+    // Indeed, let m = 2^32 then
+    // end - start = end + m - start (mod m).
+
+    clock_offset = (clock_t)(end_clock - start_clock);
+  }
+
+  d_o[0] = clock_offset;
+}
+
+// We create two identical kernels calling clock_block(), we create two so that
+// we can identify dependencies in the profile timeline ("kernel_B" is always
+// dependent on "kernel_A" in the same stream).
+__global__ void kernel_A(clock_t *d_o, clock_t clock_count) {
+  clock_block(d_o, clock_count);
+}
+__global__ void kernel_B(clock_t *d_o, clock_t clock_count) {
+  clock_block(d_o, clock_count);
+}
+
+// Single-warp reduction kernel (note: this is not optimized for simplicity)
+__global__ void sum(clock_t *d_clocks, int N) {
+  // Handle to thread block group
+  cg::thread_block cta = cg::this_thread_block();
+  __shared__ clock_t s_clocks[32];
+
+  clock_t my_sum = 0;
+
+  for (int i = threadIdx.x; i < N; i += blockDim.x) {
+    my_sum += d_clocks[i];
+  }
+
+  s_clocks[threadIdx.x] = my_sum;
+  cg::sync(cta);
+
+  for (int i = warpSize / 2; i > 0; i /= 2) {
+    if (threadIdx.x < i) {
+      s_clocks[threadIdx.x] += s_clocks[threadIdx.x + i];
+    }
+
+    cg::sync(cta);
+  }
+
+  if (threadIdx.x == 0) {
+    d_clocks[0] = s_clocks[0];
+  }
+}
+
+int main(int argc, char **argv) {
+  int nstreams = 32;       // One stream for each pair of kernels
+  float kernel_time = 10;  // Time each kernel should run in ms
+  float elapsed_time;
+  int cuda_device = 0;
+
+  printf("starting %s...\n", sSDKsample);
+
+  // Get number of streams (if overridden on the command line)
+  if (checkCmdLineFlag(argc, (const char **)argv, "nstreams")) {
+    nstreams = getCmdLineArgumentInt(argc, (const char **)argv, "nstreams");
+  }
+
+  // Use command-line specified CUDA device, otherwise use device with
+  // highest Gflops/s
+  cuda_device = findCudaDevice(argc, (const char **)argv);
+
+  // Get device properties
+  hipDeviceProp_t deviceProp;
+  checkCudaErrors(hipGetDevice(&cuda_device));
+  checkCudaErrors(hipGetDeviceProperties(&deviceProp, cuda_device));
+
+  // HyperQ is available in devices of Compute Capability 3.5 and higher
+  if (deviceProp.major < 3 || (deviceProp.major == 3 && deviceProp.minor < 5)) {
+    if (deviceProp.concurrentKernels == 0) {
+      printf(
+          "> GPU does not support concurrent kernel execution (SM 3.5 or "
+          "higher required)\n");
+      printf("  CUDA kernel runs will be serialized\n");
+    } else {
+      printf("> GPU does not support HyperQ\n");
+      printf("  CUDA kernel runs will have limited concurrency\n");
+    }
+  }
+
+  printf("> Detected Compute SM %d.%d hardware with %d multi-processors\n",
+         deviceProp.major, deviceProp.minor, deviceProp.multiProcessorCount);
+
+  // Allocate host memory for the output (reduced to a single value)
+  clock_t *a = 0;
+  checkCudaErrors(hipHostMalloc((void **)&a, sizeof(clock_t)));
+
+  // Allocate device memory for the output (one value for each kernel)
+  clock_t *d_a = 0;
+  checkCudaErrors(hipMalloc((void **)&d_a, 2 * nstreams * sizeof(clock_t)));
+
+  // Allocate and initialize an array of stream handles
+  hipStream_t *streams =
+      (hipStream_t *)malloc(nstreams * sizeof(hipStream_t));
+
+  for (int i = 0; i < nstreams; i++) {
+    checkCudaErrors(hipStreamCreate(&(streams[i])));
+  }
+
+  // Create CUDA event handles
+  hipEvent_t start_event, stop_event;
+  checkCudaErrors(hipEventCreate(&start_event));
+  checkCudaErrors(hipEventCreate(&stop_event));
+
+  // Target time per kernel is kernel_time ms, clockRate is in KHz
+  // Target number of clocks = target time * clock frequency
+#if defined(__arm__) || defined(__aarch64__)
+  // the kernel takes more time than the channel reset time on arm archs, so to
+  // prevent hangs reduce time_clocks.
+  clock_t time_clocks = (clock_t)(kernel_time * (deviceProp.clockRate / 100));
+#else
+  clock_t time_clocks = (clock_t)(kernel_time * deviceProp.clockRate);
+#endif
+  clock_t total_clocks = 0;
+
+  // Start the clock
+  checkCudaErrors(hipEventRecord(start_event, 0));
+
+  // Queue pairs of {kernel_A, kernel_B} in separate streams
+  for (int i = 0; i < nstreams; ++i) {
+    kernel_A<<<1, 1, 0, streams[i]>>>(&d_a[2 * i], time_clocks);
+    total_clocks += time_clocks;
+    kernel_B<<<1, 1, 0, streams[i]>>>(&d_a[2 * i + 1], time_clocks);
+    total_clocks += time_clocks;
+  }
+
+  // Stop the clock in stream 0 (i.e. all previous kernels will be complete)
+  checkCudaErrors(hipEventRecord(stop_event, 0));
+
+  // At this point the CPU has dispatched all work for the GPU and can
+  // continue processing other tasks in parallel. In this sample we just want
+  // to wait until all work is done so we use a blocking hipMemcpy below.
+
+  // Run the sum kernel and copy the result back to host
+  sum<<<1, 32>>>(d_a, 2 * nstreams);
+  checkCudaErrors(hipMemcpy(a, d_a, sizeof(clock_t), hipMemcpyDeviceToHost));
+
+  // stop_event will have been recorded but including the synchronize here to
+  // prevent copy/paste errors!
+  checkCudaErrors(hipEventSynchronize(stop_event));
+  checkCudaErrors(hipEventElapsedTime(&elapsed_time, start_event, stop_event));
+
+  printf(
+      "Expected time for serial execution of %d sets of kernels is between "
+      "approx. %.3fs and %.3fs\n",
+      nstreams, (nstreams + 1) * kernel_time / 1000.0f,
+      2 * nstreams * kernel_time / 1000.0f);
+  printf(
+      "Expected time for fully concurrent execution of %d sets of kernels is "
+      "approx. %.3fs\n",
+      nstreams, 2 * kernel_time / 1000.0f);
+  printf("Measured time for sample = %.3fs\n", elapsed_time / 1000.0f);
+
+  bool bTestResult = (a[0] >= total_clocks);
+
+  // Release resources
+  for (int i = 0; i < nstreams; i++) {
+    hipStreamDestroy(streams[i]);
+  }
+
+  free(streams);
+  hipEventDestroy(start_event);
+  hipEventDestroy(stop_event);
+  hipHostFree(a);
+  hipFree(d_a);
+
+  exit(bTestResult ? EXIT_SUCCESS : EXIT_FAILURE);
+}
diff --git a/src/samples/Samples/3_CUDA_Features/cdpSimpleQuicksort/cdpSimpleQuicksort.cu.hip b/src/samples/Samples/3_CUDA_Features/cdpSimpleQuicksort/cdpSimpleQuicksort.cu.hip
index 031c347..88766f9 100644
--- a/src/samples/Samples/3_CUDA_Features/cdpSimpleQuicksort/cdpSimpleQuicksort.cu.hip
+++ b/src/samples/Samples/3_CUDA_Features/cdpSimpleQuicksort/cdpSimpleQuicksort.cu.hip
@@ -29,7 +29,7 @@
 #include <hip/hip_runtime.h>
 #include <iostream>
 #include <cstdio>
-#include <helper_cuda.h>
+#include "helper_cuda_hipified.h"
 #include <helper_string.h>
 #include "HIPCHECK.h"
 #define MAX_DEPTH 16
diff --git a/src/samples/Samples/3_CUDA_Features/simpleCudaGraphs/simpleCudaGraphs.cu.hip b/src/samples/Samples/3_CUDA_Features/simpleCudaGraphs/simpleCudaGraphs.cu.hip
index 14570c1..2dbfcf1 100644
--- a/src/samples/Samples/3_CUDA_Features/simpleCudaGraphs/simpleCudaGraphs.cu.hip
+++ b/src/samples/Samples/3_CUDA_Features/simpleCudaGraphs/simpleCudaGraphs.cu.hip
@@ -27,7 +27,7 @@
 
 #include <hip/hip_cooperative_groups.h>
 #include <hip/hip_runtime.h>
-#include <helper_cuda.h>
+#include "helper_cuda_hipified.h"
 #include <vector>
 
 namespace cg = cooperative_groups;
diff --git a/src/samples/Samples/4_CUDA_Libraries/lineOfSight/lineOfSight.cu.hip b/src/samples/Samples/4_CUDA_Libraries/lineOfSight/lineOfSight.cu.hip
index e69de29..b9d0a43 100644
--- a/src/samples/Samples/4_CUDA_Libraries/lineOfSight/lineOfSight.cu.hip
+++ b/src/samples/Samples/4_CUDA_Libraries/lineOfSight/lineOfSight.cu.hip
@@ -0,0 +1,346 @@
+#include "hip/hip_runtime.h"
+/* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *  * Neither the name of NVIDIA CORPORATION nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+// This sample is an implementation of a simple line-of-sight algorithm:
+// Given a height map and a ray originating at some observation point,
+// it computes all the points along the ray that are visible from the
+// observation point.
+// It is based on the description made in "Guy E. Blelloch.  Vector models
+// for data-parallel computing. MIT Press, 1990" and uses open source CUDA
+// Thrust Library
+
+#ifdef _WIN32
+#define NOMINMAX
+#endif
+
+// includes, system
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <math.h>
+#include <float.h>
+
+// includes, project
+#include "helper_functions.h"
+#include "helper_cuda_hipified.h"
+#include <helper_math.h>
+
+// includes, library
+#include <thrust/device_vector.h>
+#include <thrust/host_vector.h>
+#include <thrust/scan.h>
+#include <thrust/copy.h>
+
+////////////////////////////////////////////////////////////////////////////////
+// declaration, types
+
+// Boolean
+typedef unsigned char Bool;
+enum { False = 0, True = 1 };
+
+// 2D height field
+struct HeightField {
+  int width;
+  float *height;
+};
+
+// Ray
+struct Ray {
+  float3 origin;
+  float2 dir;
+  int length;
+  float oneOverLength;
+};
+
+////////////////////////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////////////
+// declaration, forward
+int runTest(int argc, char **argv);
+__global__ void computeAngles_kernel(const Ray, float *, hipTextureObject_t);
+__global__ void computeVisibilities_kernel(const float *, const float *, int,
+                                           Bool *);
+void lineOfSight_gold(const HeightField, const Ray, Bool *);
+__device__ __host__ float2 getLocation(const Ray, int);
+__device__ __host__ float getAngle(const Ray, float2, float);
+
+////////////////////////////////////////////////////////////////////////////////
+// Program main
+////////////////////////////////////////////////////////////////////////////////
+int main(int argc, char **argv) {
+  int res = runTest(argc, argv);
+
+  if (res != 1) {
+    printf("Test failed!\n");
+    exit(EXIT_FAILURE);
+  }
+
+  printf("Test passed\n");
+  exit(EXIT_SUCCESS);
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Run a line-of-sight test for CUDA
+////////////////////////////////////////////////////////////////////////////////
+int runTest(int argc, char **argv) {
+  ////////////////////////////////////////////////////////////////////////////
+  // Device initialization
+
+  printf("[%s] - Starting...\n", argv[0]);
+
+  // use command-line specified CUDA device, otherwise use device with highest
+  // Gflops/s
+  findCudaDevice(argc, (const char **)argv);
+
+  ////////////////////////////////////////////////////////////////////////////
+  // Timer
+
+  // Create
+  StopWatchInterface *timer;
+  sdkCreateTimer(&timer);
+
+  // Number of iterations to get accurate timing
+  uint numIterations = 100;
+
+  ////////////////////////////////////////////////////////////////////////////
+  // Height field
+
+  HeightField heightField;
+
+  // Allocate in host memory
+  int2 dim = make_int2(10000, 100);
+  heightField.width = dim.x;
+  thrust::host_vector<float> height(dim.x * dim.y);
+  heightField.height = (float *)&height[0];
+
+  //
+  // Fill in with an arbitrary sine surface
+  for (int x = 0; x < dim.x; ++x)
+    for (int y = 0; y < dim.y; ++y) {
+      float amp = 0.1f * (x + y);
+      float period = 2.0f + amp;
+      *(heightField.height + dim.x * y + x) =
+          amp * (sinf(sqrtf((float)(x * x + y * y)) * 2.0f * 3.1416f / period) +
+                 1.0f);
+    }
+
+  // Allocate CUDA array in device memory
+  hipChannelFormatDesc channelDesc =
+      hipCreateChannelDesc(32, 0, 0, 0, hipChannelFormatKindFloat);
+  hipArray *heightFieldArray;
+  checkCudaErrors(
+      hipMallocArray(&heightFieldArray, &channelDesc, dim.x, dim.y));
+
+  // Initialize device memory
+  checkCudaErrors(hipMemcpy2DToArray(
+      heightFieldArray, 0, 0, heightField.height, dim.x * sizeof(float),
+      dim.x * sizeof(float), dim.y, hipMemcpyHostToDevice));
+
+  hipTextureObject_t heightFieldTex;
+  hipResourceDesc texRes;
+  memset(&texRes, 0, sizeof(hipResourceDesc));
+
+  texRes.resType = hipResourceTypeArray;
+  texRes.res.array.array = heightFieldArray;
+
+  hipTextureDesc texDescr;
+  memset(&texDescr, 0, sizeof(hipTextureDesc));
+  texDescr.normalizedCoords = false;
+  texDescr.filterMode = hipFilterModePoint;
+  texDescr.addressMode[0] = hipAddressModeClamp;
+  texDescr.addressMode[1] = hipAddressModeClamp;
+  texDescr.readMode = hipReadModeElementType;
+
+  checkCudaErrors(
+      hipCreateTextureObject(&heightFieldTex, &texRes, &texDescr, NULL));
+
+  //////////////////////////////////////////////////////////////////////////////
+  // Ray (starts at origin and traverses the height field diagonally)
+
+  Ray ray;
+  ray.origin = make_float3(0, 0, 2.0f);
+  int2 dir = make_int2(dim.x - 1, dim.y - 1);
+  ray.dir = make_float2((float)dir.x, (float)dir.y);
+  ray.length = max(abs(dir.x), abs(dir.y));
+  ray.oneOverLength = 1.0f / ray.length;
+
+  //////////////////////////////////////////////////////////////////////////////
+  // View angles
+
+  // Allocate view angles for each point along the ray
+  thrust::device_vector<float> d_angles(ray.length);
+
+  // Allocate result of max-scan operation on the array of view angles
+  thrust::device_vector<float> d_scannedAngles(ray.length);
+
+  //////////////////////////////////////////////////////////////////////////////
+  // Visibility results
+
+  // Allocate visibility results for each point along the ray
+  thrust::device_vector<Bool> d_visibilities(ray.length);
+  thrust::host_vector<Bool> h_visibilities(ray.length);
+  thrust::host_vector<Bool> h_visibilitiesRef(ray.length);
+
+  //////////////////////////////////////////////////////////////////////////////
+  // Reference solution
+  lineOfSight_gold(heightField, ray, (Bool *)&h_visibilitiesRef[0]);
+
+  //////////////////////////////////////////////////////////////////////////////
+  // Device solution
+
+  // Execution configuration
+  dim3 block(256);
+  dim3 grid((uint)ceil(ray.length / (double)block.x));
+
+  // Compute device solution
+  printf("Line of sight\n");
+  sdkStartTimer(&timer);
+
+  for (uint i = 0; i < numIterations; ++i) {
+    // Compute view angle for each point along the ray
+    computeAngles_kernel<<<grid, block>>>(
+        ray, thrust::raw_pointer_cast(&d_angles[0]), heightFieldTex);
+    getLastCudaError("Kernel execution failed");
+
+    // Perform a max-scan operation on the array of view angles
+    thrust::inclusive_scan(d_angles.begin(), d_angles.end(),
+                           d_scannedAngles.begin(), thrust::maximum<float>());
+    getLastCudaError("Kernel execution failed");
+
+    // Compute visibility results based on the array of view angles
+    // and its scanned version
+    computeVisibilities_kernel<<<grid, block>>>(
+        thrust::raw_pointer_cast(&d_angles[0]),
+        thrust::raw_pointer_cast(&d_scannedAngles[0]), ray.length,
+        thrust::raw_pointer_cast(&d_visibilities[0]));
+    getLastCudaError("Kernel execution failed");
+  }
+
+  hipDeviceSynchronize();
+  sdkStopTimer(&timer);
+  getLastCudaError("Kernel execution failed");
+
+  // Copy visibility results back to the host
+  thrust::copy(d_visibilities.begin(), d_visibilities.end(),
+               h_visibilities.begin());
+
+  // Compare device visibility results against reference results
+  bool res = compareData(thrust::raw_pointer_cast(&h_visibilitiesRef[0]),
+                         thrust::raw_pointer_cast(&h_visibilities[0]),
+                         ray.length, 0.0f, 0.0f);
+  printf("Average time: %f ms\n\n", sdkGetTimerValue(&timer) / numIterations);
+  sdkResetTimer(&timer);
+
+  // Cleanup memory
+  checkCudaErrors(hipFreeArray(heightFieldArray));
+  return res;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Compute view angles for each point along the ray
+//! @param ray         ray
+//! @param angles      view angles
+////////////////////////////////////////////////////////////////////////////////
+__global__ void computeAngles_kernel(const Ray ray, float *angles,
+                                     hipTextureObject_t HeightFieldTex) {
+  uint i = blockDim.x * blockIdx.x + threadIdx.x;
+
+  if (i < ray.length) {
+    float2 location = getLocation(ray, i + 1);
+    float height = tex2D<float>(HeightFieldTex, location.x, location.y);
+    float angle = getAngle(ray, location, height);
+    angles[i] = angle;
+  }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Compute visibility for each point along the ray
+//! @param angles          view angles
+//! @param scannedAngles   max-scanned view angles
+//! @param numAngles       number of view angles
+//! @param visibilities    boolean array indicating the visibility of each point
+//!                        along the ray
+////////////////////////////////////////////////////////////////////////////////
+__global__ void computeVisibilities_kernel(const float *angles,
+                                           const float *scannedAngles,
+                                           int numAngles, Bool *visibilities) {
+  uint i = blockDim.x * blockIdx.x + threadIdx.x;
+
+  if (i < numAngles) {
+    visibilities[i] = scannedAngles[i] <= angles[i];
+  }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Compute reference data set
+//! @param heightField     height field
+//! @param ray             ray
+//! @param visibilities    boolean array indicating the visibility of each point
+//!                        along the ray
+////////////////////////////////////////////////////////////////////////////////
+void lineOfSight_gold(const HeightField heightField, const Ray ray,
+                      Bool *visibilities) {
+  float angleMax = asinf(-1.0f);
+
+  for (int i = 0; i < ray.length; ++i) {
+    float2 location = getLocation(ray, i + 1);
+    float height =
+        *(heightField.height + heightField.width * (int)floorf(location.y) +
+          (int)floorf(location.x));
+    float angle = getAngle(ray, location, height);
+
+    if (angle > angleMax) {
+      angleMax = angle;
+      visibilities[i] = True;
+    } else {
+      visibilities[i] = False;
+    }
+  }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Compute the 2D coordinates of the point located at i steps from the origin
+//! of the ray
+//! @param ray      ray
+//! @param i        integer offset along the ray
+////////////////////////////////////////////////////////////////////////////////
+__device__ __host__ float2 getLocation(const Ray ray, int i) {
+  float step = i * ray.oneOverLength;
+  return make_float2(ray.origin.x, ray.origin.y) + ray.dir * step;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+//! Compute the angle of view between a 3D point and the origin of the ray
+//! @param ray        ray
+//! @param location   2D coordinates of the input point
+//! @param height     height of the input point
+////////////////////////////////////////////////////////////////////////////////
+__device__ __host__ float getAngle(const Ray ray, float2 location,
+                                   float height) {
+  float2 dir = location - make_float2(ray.origin.x, ray.origin.y);
+  return atanf((height - ray.origin.z) / length(dir));
+}
diff --git a/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_callback/simpleCUFFT_callback.cu.hip b/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_callback/simpleCUFFT_callback.cu.hip
index 3e24586..02c3077 100644
--- a/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_callback/simpleCUFFT_callback.cu.hip
+++ b/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_callback/simpleCUFFT_callback.cu.hip
@@ -46,8 +46,8 @@
 #include <hip/hip_runtime.h>
 #include <hipfft.h>
 #include <hipfftXt.h>
-#include <helper_functions.h>
-#include <helper_cuda.h>
+#include "helper_functions.h"
+#include "helper_cuda_hipified.h"
 
 // Complex data type
 typedef float2 Complex;
