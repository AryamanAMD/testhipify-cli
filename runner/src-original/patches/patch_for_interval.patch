diff --git a/src/samples/Common/HIPCHECK.h b/src/samples/Common/HIPCHECK.h
index 9b61819..8fdaa7b 100644
--- a/src/samples/Common/HIPCHECK.h
+++ b/src/samples/Common/HIPCHECK.h
@@ -6,7 +6,7 @@
 #define KMAG "\x1B[35m"
 #define KCYN "\x1B[36m"
 #define KWHT "\x1B[37m"
-
+#include <hip/hip_runtime_api.h>
 
 
 #define failed(...)                                                                                \
@@ -23,4 +23,4 @@
         printf("%serror: '%s'(%d) at %s:%d%s\n", KRED, hipGetErrorString(error), error, __FILE__,  \
                __LINE__, KNRM);                                                                    \
         failed("API returned error code.");                                                        \
-    }
\ No newline at end of file
+    }
diff --git a/src/samples/Samples/0_Introduction/cppOverload/cppOverload.cu.hip b/src/samples/Samples/0_Introduction/cppOverload/cppOverload.cu.hip
index bf105b0..f7207aa 100644
--- a/src/samples/Samples/0_Introduction/cppOverload/cppOverload.cu.hip
+++ b/src/samples/Samples/0_Introduction/cppOverload/cppOverload.cu.hip
@@ -30,15 +30,11 @@
 #define DIV_UP(a, b) (((a) + (b) - 1) / (b))
 
 // Includes, system
-
-#include <hip/hip_runtime.h>
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 #include <helper_cuda.h>
 #include <helper_string.h>
 #include <helper_math.h>
-#include "cppOverload_kernel.cuh"
+#include "cppOverload_kernel_hipified.cuh"
 
 const char *sampleName = "C++ Function Overloading";
 
@@ -94,12 +90,12 @@ int main(int argc, const char *argv[]) {
   printf("%s starting...\n", sampleName);
 
   int deviceCount;
-  HIPCHECK(hipGetDeviceCount(&deviceCount));
+  checkCudaErrors(hipGetDeviceCount(&deviceCount));
   printf("Device Count: %d\n", deviceCount);
 
   int deviceID = findCudaDevice(argc, argv);
   hipDeviceProp_t prop;
-  HIPCHECK(hipGetDeviceProperties(&prop, deviceID));
+  checkCudaErrors(hipGetDeviceProperties(&prop, deviceID));
   if (prop.major < 2) {
     printf(
         "ERROR: cppOverload requires GPU devices with compute SM 2.0 or "
@@ -109,22 +105,22 @@ int main(int argc, const char *argv[]) {
     exit(EXIT_WAIVED);
   }
 
-  HIPCHECK(hipSetDevice(deviceID));
+  checkCudaErrors(hipSetDevice(deviceID));
 
   // Allocate device memory
-  HIPCHECK(hipMalloc(&dInput, sizeof(int) * N * 2));
-  HIPCHECK(hipMalloc(&dOutput, sizeof(int) * N));
+  checkCudaErrors(hipMalloc(&dInput, sizeof(int) * N * 2));
+  checkCudaErrors(hipMalloc(&dOutput, sizeof(int) * N));
 
   // Allocate host memory
-  HIPCHECK(hipHostMalloc(&hInput, sizeof(int) * N * 2));
-  HIPCHECK(hipHostMalloc(&hOutput, sizeof(int) * N));
+  checkCudaErrors(hipHostMalloc(&hInput, sizeof(int) * N * 2));
+  checkCudaErrors(hipHostMalloc(&hOutput, sizeof(int) * N));
 
   for (int i = 0; i < N * 2; i++) {
     hInput[i] = i;
   }
 
   // Copy data from host to device
-  HIPCHECK(
+  checkCudaErrors(
       hipMemcpy(dInput, hInput, sizeof(int) * N * 2, hipMemcpyHostToDevice));
 
   // Test C++ overloading
@@ -140,11 +136,11 @@ int main(int argc, const char *argv[]) {
   // overload function 1
   func1 = simple_kernel;
   memset(&attr, 0, sizeof(attr));
-  HIPCHECK(hipFuncSetCacheConfig(*func1, hipFuncCachePreferShared));
-  HIPCHECK(hipFuncGetAttributes(&attr, *func1));
+  checkCudaErrors(hipFuncSetCacheConfig(*func1, hipFuncCachePreferShared));
+  checkCudaErrors(hipFuncGetAttributes(&attr, *func1));
   OUTPUT_ATTR(attr);
   (*func1)<<<DIV_UP(N, THREAD_N), THREAD_N>>>(dInput, dOutput, a);
-  HIPCHECK(
+  checkCudaErrors(
       hipMemcpy(hOutput, dOutput, sizeof(int) * N, hipMemcpyDeviceToHost));
   funcResult = check_func1(hInput, hOutput, a);
   printf("simple_kernel(const int *pIn, int *pOut, int a) %s\n\n",
@@ -154,11 +150,11 @@ int main(int argc, const char *argv[]) {
   // overload function 2
   func2 = simple_kernel;
   memset(&attr, 0, sizeof(attr));
-  HIPCHECK(hipFuncSetCacheConfig(*func2, hipFuncCachePreferShared));
-  HIPCHECK(hipFuncGetAttributes(&attr, *func2));
+  checkCudaErrors(hipFuncSetCacheConfig(*func2, hipFuncCachePreferShared));
+  checkCudaErrors(hipFuncGetAttributes(&attr, *func2));
   OUTPUT_ATTR(attr);
   (*func2)<<<DIV_UP(N, THREAD_N), THREAD_N>>>((int2 *)dInput, dOutput, a);
-  HIPCHECK(
+  checkCudaErrors(
       hipMemcpy(hOutput, dOutput, sizeof(int) * N, hipMemcpyDeviceToHost));
   funcResult = check_func2(reinterpret_cast<int2 *>(hInput), hOutput, a);
   printf("simple_kernel(const int2 *pIn, int *pOut, int a) %s\n\n",
@@ -168,11 +164,11 @@ int main(int argc, const char *argv[]) {
   // overload function 3
   func3 = simple_kernel;
   memset(&attr, 0, sizeof(attr));
-  HIPCHECK(hipFuncSetCacheConfig(*func3, hipFuncCachePreferShared));
-  HIPCHECK(hipFuncGetAttributes(&attr, *func3));
+  checkCudaErrors(hipFuncSetCacheConfig(*func3, hipFuncCachePreferShared));
+  checkCudaErrors(hipFuncGetAttributes(&attr, *func3));
   OUTPUT_ATTR(attr);
   (*func3)<<<DIV_UP(N, THREAD_N), THREAD_N>>>(dInput, dInput + N, dOutput, a);
-  HIPCHECK(
+  checkCudaErrors(
       hipMemcpy(hOutput, dOutput, sizeof(int) * N, hipMemcpyDeviceToHost));
   funcResult = check_func3(&hInput[0], &hInput[N], hOutput, a);
   printf(
@@ -181,12 +177,12 @@ int main(int argc, const char *argv[]) {
       funcResult ? "PASSED" : "FAILED");
   testResult &= funcResult;
 
-  HIPCHECK(hipFree(dInput));
-  HIPCHECK(hipFree(dOutput));
-  HIPCHECK(hipHostFree(hOutput));
-  HIPCHECK(hipHostFree(hInput));
+  checkCudaErrors(hipFree(dInput));
+  checkCudaErrors(hipFree(dOutput));
+  checkCudaErrors(hipHostFree(hOutput));
+  checkCudaErrors(hipHostFree(hInput));
 
-  HIPCHECK(hipDeviceSynchronize());
+  checkCudaErrors(hipDeviceSynchronize());
 
   exit(testResult ? EXIT_SUCCESS : EXIT_FAILURE);
 }
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/interval/interval.cu.hip b/src/samples/Samples/2_Concepts_and_Techniques/interval/interval.cu.hip
index b75f49b..e2c7460 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/interval/interval.cu.hip
+++ b/src/samples/Samples/2_Concepts_and_Techniques/interval/interval.cu.hip
@@ -38,13 +38,9 @@
  */
 
 const static char *sSDKsample = "Interval Computing";
-
-
-#include <hip/hip_runtime.h>
+#include "hip/hip_runtime.h"
 #include <iostream>
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 #include "helper_cuda_hipified.h"
 #include "interval_hipified.h"
 #include "cuda_interval_hipified.h"
@@ -99,7 +95,7 @@ int main(int argc, char *argv[]) {
 
   // We need L1 cache to store the stack (only applicable to sm_20 and higher)
   CHECKED_CALL(
-      hipFuncSetCacheConfig(test_interval_newton<T>, hipFuncCachePreferL1));
+      hipFuncSetCacheConfig((const void*)test_interval_newton<T>, hipFuncCachePreferL1));
 
   // Increase the stack size large enough for the non-inlined and recursive
   // function calls (only applicable to sm_20 and higher)
diff --git a/src/samples/Samples/3_CUDA_Features/cdpBezierTessellation/BezierLineCDP.cu.hip b/src/samples/Samples/3_CUDA_Features/cdpBezierTessellation/BezierLineCDP.cu.hip
index 8f85527..295d9d4 100644
--- a/src/samples/Samples/3_CUDA_Features/cdpBezierTessellation/BezierLineCDP.cu.hip
+++ b/src/samples/Samples/3_CUDA_Features/cdpBezierTessellation/BezierLineCDP.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -25,15 +26,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-
-#include <hip/hip_runtime.h>
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 #include <hip/hip_runtime_api.h>
-#include "helper_cuda_hipified.h"
+#include <helper_cuda.h>
 #include <string.h>
-
+#include "HIPCHECK.h"
 __forceinline__ __device__ float2 operator+(float2 a, float2 b) {
   float2 c;
   c.x = a.x + b.x;
diff --git a/src/samples/Samples/3_CUDA_Features/cudaTensorCoreGemm/cudaTensorCoreGemm.cu.hip b/src/samples/Samples/3_CUDA_Features/cudaTensorCoreGemm/cudaTensorCoreGemm.cu.hip
index 005352e..dd75903 100644
--- a/src/samples/Samples/3_CUDA_Features/cudaTensorCoreGemm/cudaTensorCoreGemm.cu.hip
+++ b/src/samples/Samples/3_CUDA_Features/cudaTensorCoreGemm/cudaTensorCoreGemm.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -62,10 +63,8 @@
 
 #include <assert.h>
 #include <hip/hip_runtime.h>
-#include <mma.h>
+#include "rocwmma.hpp"
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 
 // helper functions and utilities to work with CUDA
 #include <helper_cuda.h>
@@ -176,8 +175,8 @@
     }                                                       \
   } while (0)
 
-using namespace nvcuda;
-
+//using namespace nvcuda;
+using namespace rocwmma;
 __host__ void init_host_matrices(half *a, half *b, float *c) {
   for (int i = 0; i < M_GLOBAL; i++) {
     for (int j = 0; j < K_GLOBAL; j++) {
@@ -486,7 +485,7 @@ int main(int argc, char **argv) {
   int dev = findCudaDevice(argc, (const char **)argv);
 
   hipDeviceProp_t deviceProp;
-  HIPCHECK(hipGetDeviceProperties(&deviceProp, dev));
+  checkCudaErrors(hipGetDeviceProperties(&deviceProp, dev));
 
   // Tensor cores require a GPU of Volta (SM7X) architecture or higher.
   if (deviceProp.major < 7) {
@@ -521,13 +520,13 @@ int main(int argc, char **argv) {
   float *C = NULL;
   float *D = NULL;
 
-  HIPCHECK(hipMalloc(reinterpret_cast<void **>(&A),
+  checkCudaErrors(hipMalloc(reinterpret_cast<void **>(&A),
                              sizeof(half) * M_GLOBAL * K_GLOBAL));
-  HIPCHECK(hipMalloc(reinterpret_cast<void **>(&B),
+  checkCudaErrors(hipMalloc(reinterpret_cast<void **>(&B),
                              sizeof(half) * N_GLOBAL * K_GLOBAL));
-  HIPCHECK(hipMalloc(reinterpret_cast<void **>(&C),
+  checkCudaErrors(hipMalloc(reinterpret_cast<void **>(&C),
                              sizeof(float) * M_GLOBAL * N_GLOBAL));
-  HIPCHECK(hipMalloc(reinterpret_cast<void **>(&D),
+  checkCudaErrors(hipMalloc(reinterpret_cast<void **>(&D),
                              sizeof(float) * M_GLOBAL * N_GLOBAL));
 
   assert(((unsigned long long)A) % 128 == 0);
@@ -539,13 +538,13 @@ int main(int argc, char **argv) {
 
   printf("Preparing data for GPU...\n");
 
-  HIPCHECK(hipMemcpy(A, A_h, sizeof(half) * M_GLOBAL * K_GLOBAL,
+  checkCudaErrors(hipMemcpy(A, A_h, sizeof(half) * M_GLOBAL * K_GLOBAL,
                              hipMemcpyHostToDevice));
-  HIPCHECK(hipMemcpy(B, B_h, sizeof(half) * N_GLOBAL * K_GLOBAL,
+  checkCudaErrors(hipMemcpy(B, B_h, sizeof(half) * N_GLOBAL * K_GLOBAL,
                              hipMemcpyHostToDevice));
-  HIPCHECK(hipMemcpy(C, C_h, sizeof(float) * M_GLOBAL * N_GLOBAL,
+  checkCudaErrors(hipMemcpy(C, C_h, sizeof(float) * M_GLOBAL * N_GLOBAL,
                              hipMemcpyHostToDevice));
-  HIPCHECK(hipMemset(D, 0, sizeof(float) * M_GLOBAL * N_GLOBAL));
+  checkCudaErrors(hipMemset(D, 0, sizeof(float) * M_GLOBAL * N_GLOBAL));
 
   enum {
     // Compute the right amount of shared memory to request.
@@ -567,21 +566,21 @@ int main(int argc, char **argv) {
 
   hipEvent_t start, stop;
 
-  HIPCHECK(hipEventCreate(&start));
-  HIPCHECK(hipEventCreate(&stop));
-  HIPCHECK(hipEventRecord(start));
+  checkCudaErrors(hipEventCreate(&start));
+  checkCudaErrors(hipEventCreate(&stop));
+  checkCudaErrors(hipEventRecord(start));
 
   // If enough shared memory available on the GPU use high performant kernel
   if (deviceProp.sharedMemPerMultiprocessor >= SHMEM_SZ) {
     printf("Computing... using high performance kernel compute_gemm \n");
 
-    HIPCHECK(hipFuncSetAttribute(
+    checkCudaErrors(hipFuncSetAttribute(
         compute_gemm, hipFuncAttributeMaxDynamicSharedMemorySize, SHMEM_SZ));
     checkKernelErrors(
         (compute_gemm<<<deviceProp.multiProcessorCount, THREADS_PER_BLOCK,
                         SHMEM_SZ>>>(A, B, C, D, alpha, beta)));
 #if CPU_DEBUG
-    HIPCHECK(hipMemcpy(result_hD, D,
+    checkCudaErrors(hipMemcpy(result_hD, D,
                                sizeof(float) * M_GLOBAL * N_GLOBAL,
                                hipMemcpyDeviceToHost));
 #endif
@@ -602,14 +601,14 @@ int main(int argc, char **argv) {
     simple_wmma_gemm<<<gridDim, blockDim>>>(A, B, C, D, M_GLOBAL, N_GLOBAL,
                                             K_GLOBAL, alpha, beta);
 #if CPU_DEBUG
-    HIPCHECK(hipMemcpy(result_hD, D,
+    checkCudaErrors(hipMemcpy(result_hD, D,
                                sizeof(float) * M_GLOBAL * N_GLOBAL,
                                hipMemcpyDeviceToHost));
 #endif
   }
 
-  HIPCHECK(hipEventRecord(stop));
-  HIPCHECK(hipEventSynchronize(stop));
+  checkCudaErrors(hipEventRecord(stop));
+  checkCudaErrors(hipEventSynchronize(stop));
 
 #if CPU_DEBUG
   printf("Verifying correctness of the computations...\n");
@@ -630,7 +629,7 @@ int main(int argc, char **argv) {
 
   float milliseconds = 0;
 
-  HIPCHECK(hipEventElapsedTime(&milliseconds, start, stop));
+  checkCudaErrors(hipEventElapsedTime(&milliseconds, start, stop));
 
   printf("Time: %f ms\n", milliseconds);
   printf("TFLOPS: %.2f\n", static_cast<double>((static_cast<double>(M_GLOBAL) *
@@ -641,10 +640,10 @@ int main(int argc, char **argv) {
   free(A_h);
   free(B_h);
   free(C_h);
-  HIPCHECK(hipFree(reinterpret_cast<void *>(A)));
-  HIPCHECK(hipFree(reinterpret_cast<void *>(B)));
-  HIPCHECK(hipFree(reinterpret_cast<void *>(C)));
-  HIPCHECK(hipFree(reinterpret_cast<void *>(D)));
+  checkCudaErrors(hipFree(reinterpret_cast<void *>(A)));
+  checkCudaErrors(hipFree(reinterpret_cast<void *>(B)));
+  checkCudaErrors(hipFree(reinterpret_cast<void *>(C)));
+  checkCudaErrors(hipFree(reinterpret_cast<void *>(D)));
 
   return 0;
 }
diff --git a/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_2d_MGPU/simpleCUFFT_2d_MGPU.cu.hip b/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_2d_MGPU/simpleCUFFT_2d_MGPU.cu.hip
index 6ad007d..1662a97 100644
--- a/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_2d_MGPU/simpleCUFFT_2d_MGPU.cu.hip
+++ b/src/samples/Samples/4_CUDA_Libraries/simpleCUFFT_2d_MGPU/simpleCUFFT_2d_MGPU.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,8 +41,6 @@
 // System includes
 #include <stdlib.h>
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 
 #include <string.h>
 #include <math.h>
@@ -79,7 +78,7 @@ int main(int argc, char **argv) {
       "starting...\n\n");
 
   int GPU_N;
-  HIPCHECK(hipGetDeviceCount(&GPU_N));
+  checkCudaErrors(hipGetDeviceCount(&GPU_N));
 
   if (GPU_N < GPU_COUNT) {
     printf("No. of GPU on node %d\n", GPU_N);
@@ -95,7 +94,7 @@ int main(int argc, char **argv) {
 
   for (int i = 0; i < GPU_N; i++) {
     hipDeviceProp_t deviceProp;
-    HIPCHECK(hipGetDeviceProperties(&deviceProp, i));
+    checkCudaErrors(hipGetDeviceProperties(&deviceProp, i));
     major_minor[i * 2] = deviceProp.major;
     major_minor[i * 2 + 1] = deviceProp.minor;
     printf("GPU Device %d: \"%s\" with compute capability %d.%d\n", i,
@@ -163,7 +162,7 @@ int main(int argc, char **argv) {
     h_f[i].y = 0.0f;
   }
 
-  // cufftCreate() - Create an empty plan
+  // hipfftCreate() - Create an empty plan
   hipfftResult result;
   hipfftHandle planComplex;
   result = hipfftCreate(&planComplex);
@@ -180,7 +179,7 @@ int main(int argc, char **argv) {
     printf("No such board was found. Waiving sample.\n");
     exit(EXIT_WAIVED);
   } else if (result != HIPFFT_SUCCESS) {
-    printf("hipfftXtSetGPUs failed\n");
+    printf("cufftXtSetGPUs failed\n");
     exit(EXIT_FAILURE);
   }
 
@@ -188,7 +187,7 @@ int main(int argc, char **argv) {
   printf("\nRunning on GPUs\n");
   for (int i = 0; i < 2; i++) {
     hipDeviceProp_t deviceProp;
-    HIPCHECK(hipGetDeviceProperties(&deviceProp, whichGPUs[i]));
+    checkCudaErrors(hipGetDeviceProperties(&deviceProp, whichGPUs[i]));
     printf("GPU Device %d: \"%s\" with compute capability %d.%d\n",
            whichGPUs[i], deviceProp.name, deviceProp.major, deviceProp.minor);
   }
@@ -196,7 +195,7 @@ int main(int argc, char **argv) {
   size_t *worksize;
   worksize = (size_t *)malloc(sizeof(size_t) * nGPUs);
 
-  // cufftMakePlan2d() - Create the plan
+  // hipfftMakePlan2d() - Create the plan
   result = hipfftMakePlan2d(planComplex, N, N, HIPFFT_C2C, worksize);
   if (result != HIPFFT_SUCCESS) {
     printf("*MakePlan* failed\n");
@@ -323,7 +322,7 @@ int main(int argc, char **argv) {
     exit(EXIT_FAILURE);
   }
 
-  // cufftDestroy() - Destroy FFT plan
+  // hipfftDestroy() - Destroy FFT plan
   result = hipfftDestroy(planComplex);
   if (result != HIPFFT_SUCCESS) {
     printf("hipfftDestroy failed: code %d\n", (int)result);
@@ -380,5 +379,3 @@ __global__ void solvePoisson(hipfftComplex *ft, hipfftComplex *ft_k, float *k,
     ft_k[index].y = -ft[index].y * 1 / k2;
   }
 }
-x].y * 1 / k2;
-  }
diff --git a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D.cu.hip b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D.cu.hip
index f90f6cf..62c8fe6 100644
--- a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D.cu.hip
+++ b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D.cu.hip
@@ -25,17 +25,13 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-
-#include <hip/hip_runtime.h>
 #include <assert.h>
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 #include <stdlib.h>
 #include <string.h>
 #include <helper_cuda.h>
-#include "convolutionFFT2D_common.h"
-#include "convolutionFFT2D.cuh"
+#include "convolutionFFT2D_common_hipified.h"
+#include "convolutionFFT2D_hipified.cuh"
 
 ////////////////////////////////////////////////////////////////////////////////
 /// Position convolution kernel center at (0, 0) in the image
@@ -65,7 +61,7 @@ extern "C" void padKernel(float *d_Dst, float *d_Src, int fftH, int fftW,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(hipCreateTextureObject(&texFloat, &texRes, &texDescr, NULL));
+  checkCudaErrors(hipCreateTextureObject(&texFloat, &texRes, &texDescr, NULL));
 #endif
 
   padKernel_kernel<<<grid, threads>>>(d_Dst, d_Src, fftH, fftW, kernelH,
@@ -78,7 +74,7 @@ extern "C" void padKernel(float *d_Dst, float *d_Src, int fftH, int fftW,
   getLastCudaError("padKernel_kernel<<<>>> execution failed\n");
 
 #if (USE_TEXTURE)
-  HIPCHECK(hipDestroyTextureObject(texFloat));
+  checkCudaErrors(hipDestroyTextureObject(texFloat));
 #endif
 }
 
@@ -111,7 +107,7 @@ extern "C" void padDataClampToBorder(float *d_Dst, float *d_Src, int fftH,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(hipCreateTextureObject(&texFloat, &texRes, &texDescr, NULL));
+  checkCudaErrors(hipCreateTextureObject(&texFloat, &texRes, &texDescr, NULL));
 #endif
 
   padDataClampToBorder_kernel<<<grid, threads>>>(
@@ -124,7 +120,7 @@ extern "C" void padDataClampToBorder(float *d_Dst, float *d_Src, int fftH,
   getLastCudaError("padDataClampToBorder_kernel<<<>>> execution failed\n");
 
 #if (USE_TEXTURE)
-  HIPCHECK(hipDestroyTextureObject(texFloat));
+  checkCudaErrors(hipDestroyTextureObject(texFloat));
 #endif
 }
 
@@ -181,7 +177,7 @@ extern "C" void spPostprocess2D(void *d_Dst, void *d_Src, uint DY, uint DX,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(
+  checkCudaErrors(
       hipCreateTextureObject(&texComplex, &texRes, &texDescr, NULL));
 #endif
 
@@ -196,7 +192,7 @@ extern "C" void spPostprocess2D(void *d_Dst, void *d_Src, uint DY, uint DX,
   getLastCudaError("spPostprocess2D_kernel<<<>>> execution failed\n");
 
 #if (USE_TEXTURE)
-  HIPCHECK(hipDestroyTextureObject(texComplex));
+  checkCudaErrors(hipDestroyTextureObject(texComplex));
 #endif
 }
 
@@ -233,7 +229,7 @@ extern "C" void spPreprocess2D(void *d_Dst, void *d_Src, uint DY, uint DX,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(
+  checkCudaErrors(
       hipCreateTextureObject(&texComplex, &texRes, &texDescr, NULL));
 #endif
   spPreprocess2D_kernel<<<iDivUp(threadCount, BLOCKDIM), BLOCKDIM>>>(
@@ -247,7 +243,7 @@ extern "C" void spPreprocess2D(void *d_Dst, void *d_Src, uint DY, uint DX,
   getLastCudaError("spPreprocess2D_kernel<<<>>> execution failed\n");
 
 #if (USE_TEXTURE)
-  HIPCHECK(hipDestroyTextureObject(texComplex));
+  checkCudaErrors(hipDestroyTextureObject(texComplex));
 #endif
 }
 
@@ -286,7 +282,7 @@ extern "C" void spProcess2D(void *d_Dst, void *d_SrcA, void *d_SrcB, uint DY,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(
+  checkCudaErrors(
       hipCreateTextureObject(&texComplexA, &texRes, &texDescr, NULL));
 
   memset(&texRes, 0, sizeof(hipResourceDesc));
@@ -303,7 +299,7 @@ extern "C" void spProcess2D(void *d_Dst, void *d_SrcA, void *d_SrcB, uint DY,
   texDescr.addressMode[0] = hipAddressModeWrap;
   texDescr.readMode = hipReadModeElementType;
 
-  HIPCHECK(
+  checkCudaErrors(
       hipCreateTextureObject(&texComplexB, &texRes, &texDescr, NULL));
 #endif
   spProcess2D_kernel<<<iDivUp(threadCount, BLOCKDIM), BLOCKDIM>>>(
@@ -317,7 +313,7 @@ extern "C" void spProcess2D(void *d_Dst, void *d_SrcA, void *d_SrcB, uint DY,
   getLastCudaError("spProcess2D_kernel<<<>>> execution failed\n");
 
 #if (USE_TEXTURE)
-  HIPCHECK(hipDestroyTextureObject(texComplexA));
-  HIPCHECK(hipDestroyTextureObject(texComplexB));
+  checkCudaErrors(hipDestroyTextureObject(texComplexA));
+  checkCudaErrors(hipDestroyTextureObject(texComplexB));
 #endif
 }
diff --git a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D_gold_hipified.cpp b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D_gold_hipified.cpp
index 9bf7664..d6ff6da 100644
--- a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D_gold_hipified.cpp
+++ b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/convolutionFFT2D_gold_hipified.cpp
@@ -26,7 +26,7 @@
  */
 
 #include <assert.h>
-#include "convolutionFFT2D_common.h"
+#include "convolutionFFT2D_common_hipified.h"
 
 ////////////////////////////////////////////////////////////////////////////////
 // Reference straightforward CPU convolution
diff --git a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/main_hipified.cpp b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/main_hipified.cpp
index 656bdf5..e24a754 100644
--- a/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/main_hipified.cpp
+++ b/src/samples/Samples/5_Domain_Specific/convolutionFFT2D/main_hipified.cpp
@@ -39,13 +39,13 @@
 
 // Include CUDA runtime and CUFFT
 #include <hip/hip_runtime.h>
-#include <hipfft.h>
+#include <hipfft/hipfft.h>
 
 // Helper functions for CUDA
 #include "helper_functions.h"
 #include "helper_cuda_hipified.h"
-
-#include "convolutionFFT2D_common.h"
+#include "HIPCHECK.h"
+#include "convolutionFFT2D_common_hipified.h"
 
 ////////////////////////////////////////////////////////////////////////////////
 // Helper functions
@@ -107,20 +107,20 @@ bool test0(void) {
   h_ResultCPU = (float *)malloc(dataH * dataW * sizeof(float));
   h_ResultGPU = (float *)malloc(fftH * fftW * sizeof(float));
 
-  checkCudaErrors(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
+  HIPCHECK(
       hipMalloc((void **)&d_Kernel, kernelH * kernelW * sizeof(float)));
 
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedData, fftH * fftW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedKernel, fftH * fftW * sizeof(float)));
 
-  checkCudaErrors(hipMalloc((void **)&d_DataSpectrum,
+  HIPCHECK(hipMalloc((void **)&d_DataSpectrum,
                              fftH * (fftW / 2 + 1) * sizeof(fComplex)));
-  checkCudaErrors(hipMalloc((void **)&d_KernelSpectrum,
+  HIPCHECK(hipMalloc((void **)&d_KernelSpectrum,
                              fftH * (fftW / 2 + 1) * sizeof(fComplex)));
-  checkCudaErrors(hipMemset(d_KernelSpectrum, 0,
+  HIPCHECK(hipMemset(d_KernelSpectrum, 0,
                              fftH * (fftW / 2 + 1) * sizeof(fComplex)));
 
   printf("...generating random input data\n");
@@ -135,17 +135,17 @@ bool test0(void) {
   }
 
   printf("...creating R2C & C2R FFT plans for %i x %i\n", fftH, fftW);
-  checkCudaErrors(hipfftPlan2d(&fftPlanFwd, fftH, fftW, HIPFFT_R2C));
-  checkCudaErrors(hipfftPlan2d(&fftPlanInv, fftH, fftW, HIPFFT_C2R));
+  HIPCHECK(hipfftPlan2d(&fftPlanFwd, fftH, fftW, HIPFFT_R2C));
+  HIPCHECK(hipfftPlan2d(&fftPlanInv, fftH, fftW, HIPFFT_C2R));
 
   printf("...uploading to GPU and padding convolution kernel and input data\n");
-  checkCudaErrors(hipMemcpy(d_Kernel, h_Kernel,
+  HIPCHECK(hipMemcpy(d_Kernel, h_Kernel,
                              kernelH * kernelW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
+  HIPCHECK(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
-  checkCudaErrors(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
 
   padKernel(d_PaddedKernel, d_Kernel, fftH, fftW, kernelH, kernelW, kernelY,
             kernelX);
@@ -156,27 +156,27 @@ bool test0(void) {
   // Not including kernel transformation into time measurement,
   // since convolution kernel is not changed very frequently
   printf("...transforming convolution kernel\n");
-  checkCudaErrors(hipfftExecR2C(fftPlanFwd, (hipfftReal *)d_PaddedKernel,
+  HIPCHECK(hipfftExecR2C(fftPlanFwd, (hipfftReal *)d_PaddedKernel,
                                (hipfftComplex *)d_KernelSpectrum));
 
   printf("...running GPU FFT convolution: ");
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkResetTimer(&hTimer);
   sdkStartTimer(&hTimer);
-  checkCudaErrors(hipfftExecR2C(fftPlanFwd, (hipfftReal *)d_PaddedData,
+  HIPCHECK(hipfftExecR2C(fftPlanFwd, (hipfftReal *)d_PaddedData,
                                (hipfftComplex *)d_DataSpectrum));
   modulateAndNormalize(d_DataSpectrum, d_KernelSpectrum, fftH, fftW, 1);
-  checkCudaErrors(hipfftExecC2R(fftPlanInv, (hipfftComplex *)d_DataSpectrum,
+  HIPCHECK(hipfftExecC2R(fftPlanInv, (hipfftComplex *)d_DataSpectrum,
                                (hipfftReal *)d_PaddedData));
 
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkStopTimer(&hTimer);
   double gpuTime = sdkGetTimerValue(&hTimer);
   printf("%f MPix/s (%f ms)\n",
          (double)dataH * (double)dataW * 1e-6 / (gpuTime * 0.001), gpuTime);
 
   printf("...reading back GPU convolution results\n");
-  checkCudaErrors(hipMemcpy(h_ResultGPU, d_PaddedData,
+  HIPCHECK(hipMemcpy(h_ResultGPU, d_PaddedData,
                              fftH * fftW * sizeof(float),
                              hipMemcpyDeviceToHost));
 
@@ -212,15 +212,15 @@ bool test0(void) {
   printf("...shutting down\n");
   sdkDeleteTimer(&hTimer);
 
-  checkCudaErrors(hipfftDestroy(fftPlanInv));
-  checkCudaErrors(hipfftDestroy(fftPlanFwd));
+  HIPCHECK(hipfftDestroy(fftPlanInv));
+  HIPCHECK(hipfftDestroy(fftPlanFwd));
 
-  checkCudaErrors(hipFree(d_DataSpectrum));
-  checkCudaErrors(hipFree(d_KernelSpectrum));
-  checkCudaErrors(hipFree(d_PaddedData));
-  checkCudaErrors(hipFree(d_PaddedKernel));
-  checkCudaErrors(hipFree(d_Data));
-  checkCudaErrors(hipFree(d_Kernel));
+  HIPCHECK(hipFree(d_DataSpectrum));
+  HIPCHECK(hipFree(d_KernelSpectrum));
+  HIPCHECK(hipFree(d_PaddedData));
+  HIPCHECK(hipFree(d_PaddedKernel));
+  HIPCHECK(hipFree(d_Data));
+  HIPCHECK(hipFree(d_Kernel));
 
   free(h_ResultGPU);
   free(h_ResultCPU);
@@ -261,23 +261,23 @@ bool test1(void) {
   h_ResultCPU = (float *)malloc(dataH * dataW * sizeof(float));
   h_ResultGPU = (float *)malloc(fftH * fftW * sizeof(float));
 
-  checkCudaErrors(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
+  HIPCHECK(
       hipMalloc((void **)&d_Kernel, kernelH * kernelW * sizeof(float)));
 
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedData, fftH * fftW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedKernel, fftH * fftW * sizeof(float)));
 
-  checkCudaErrors(hipMalloc((void **)&d_DataSpectrum0,
+  HIPCHECK(hipMalloc((void **)&d_DataSpectrum0,
                              fftH * (fftW / 2) * sizeof(fComplex)));
-  checkCudaErrors(hipMalloc((void **)&d_KernelSpectrum0,
+  HIPCHECK(hipMalloc((void **)&d_KernelSpectrum0,
                              fftH * (fftW / 2) * sizeof(fComplex)));
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_DataSpectrum,
                  fftH * (fftW / 2 + fftPadding) * sizeof(fComplex)));
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_KernelSpectrum,
                  fftH * (fftW / 2 + fftPadding) * sizeof(fComplex)));
 
@@ -293,16 +293,16 @@ bool test1(void) {
   }
 
   printf("...creating C2C FFT plan for %i x %i\n", fftH, fftW / 2);
-  checkCudaErrors(hipfftPlan2d(&fftPlan, fftH, fftW / 2, HIPFFT_C2C));
+  HIPCHECK(hipfftPlan2d(&fftPlan, fftH, fftW / 2, HIPFFT_C2C));
 
   printf("...uploading to GPU and padding convolution kernel and input data\n");
-  checkCudaErrors(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
+  HIPCHECK(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemcpy(d_Kernel, h_Kernel,
+  HIPCHECK(hipMemcpy(d_Kernel, h_Kernel,
                              kernelH * kernelW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
-  checkCudaErrors(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
 
   padDataClampToBorder(d_PaddedData, d_Data, fftH, fftW, dataH, dataW, kernelH,
                        kernelW, kernelY, kernelX);
@@ -316,17 +316,17 @@ bool test1(void) {
   // Not including kernel transformation into time measurement,
   // since convolution kernel is not changed very frequently
   printf("...transforming convolution kernel\n");
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedKernel,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedKernel,
                                (hipfftComplex *)d_KernelSpectrum0, FFT_DIR));
   spPostprocess2D(d_KernelSpectrum, d_KernelSpectrum0, fftH, fftW / 2,
                   fftPadding, FFT_DIR);
 
   printf("...running GPU FFT convolution: ");
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkResetTimer(&hTimer);
   sdkStartTimer(&hTimer);
 
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedData,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedData,
                                (hipfftComplex *)d_DataSpectrum0, FFT_DIR));
 
   spPostprocess2D(d_DataSpectrum, d_DataSpectrum0, fftH, fftW / 2, fftPadding,
@@ -336,17 +336,17 @@ bool test1(void) {
   spPreprocess2D(d_DataSpectrum0, d_DataSpectrum, fftH, fftW / 2, fftPadding,
                  -FFT_DIR);
 
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_DataSpectrum0,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_DataSpectrum0,
                                (hipfftComplex *)d_PaddedData, -FFT_DIR));
 
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkStopTimer(&hTimer);
   double gpuTime = sdkGetTimerValue(&hTimer);
   printf("%f MPix/s (%f ms)\n",
          (double)dataH * (double)dataW * 1e-6 / (gpuTime * 0.001), gpuTime);
 
   printf("...reading back GPU FFT results\n");
-  checkCudaErrors(hipMemcpy(h_ResultGPU, d_PaddedData,
+  HIPCHECK(hipMemcpy(h_ResultGPU, d_PaddedData,
                              fftH * fftW * sizeof(float),
                              hipMemcpyDeviceToHost));
 
@@ -381,16 +381,16 @@ bool test1(void) {
 
   printf("...shutting down\n");
   sdkDeleteTimer(&hTimer);
-  checkCudaErrors(hipfftDestroy(fftPlan));
+  HIPCHECK(hipfftDestroy(fftPlan));
 
-  checkCudaErrors(hipFree(d_KernelSpectrum));
-  checkCudaErrors(hipFree(d_DataSpectrum));
-  checkCudaErrors(hipFree(d_KernelSpectrum0));
-  checkCudaErrors(hipFree(d_DataSpectrum0));
-  checkCudaErrors(hipFree(d_PaddedKernel));
-  checkCudaErrors(hipFree(d_PaddedData));
-  checkCudaErrors(hipFree(d_Kernel));
-  checkCudaErrors(hipFree(d_Data));
+  HIPCHECK(hipFree(d_KernelSpectrum));
+  HIPCHECK(hipFree(d_DataSpectrum));
+  HIPCHECK(hipFree(d_KernelSpectrum0));
+  HIPCHECK(hipFree(d_DataSpectrum0));
+  HIPCHECK(hipFree(d_PaddedKernel));
+  HIPCHECK(hipFree(d_PaddedData));
+  HIPCHECK(hipFree(d_Kernel));
+  HIPCHECK(hipFree(d_Data));
 
   free(h_ResultGPU);
   free(h_ResultCPU);
@@ -429,18 +429,18 @@ bool test2(void) {
   h_ResultCPU = (float *)malloc(dataH * dataW * sizeof(float));
   h_ResultGPU = (float *)malloc(fftH * fftW * sizeof(float));
 
-  checkCudaErrors(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(hipMalloc((void **)&d_Data, dataH * dataW * sizeof(float)));
+  HIPCHECK(
       hipMalloc((void **)&d_Kernel, kernelH * kernelW * sizeof(float)));
 
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedData, fftH * fftW * sizeof(float)));
-  checkCudaErrors(
+  HIPCHECK(
       hipMalloc((void **)&d_PaddedKernel, fftH * fftW * sizeof(float)));
 
-  checkCudaErrors(hipMalloc((void **)&d_DataSpectrum0,
+  HIPCHECK(hipMalloc((void **)&d_DataSpectrum0,
                              fftH * (fftW / 2) * sizeof(fComplex)));
-  checkCudaErrors(hipMalloc((void **)&d_KernelSpectrum0,
+  HIPCHECK(hipMalloc((void **)&d_KernelSpectrum0,
                              fftH * (fftW / 2) * sizeof(fComplex)));
 
   printf("...generating random input data\n");
@@ -455,16 +455,16 @@ bool test2(void) {
   }
 
   printf("...creating C2C FFT plan for %i x %i\n", fftH, fftW / 2);
-  checkCudaErrors(hipfftPlan2d(&fftPlan, fftH, fftW / 2, HIPFFT_C2C));
+  HIPCHECK(hipfftPlan2d(&fftPlan, fftH, fftW / 2, HIPFFT_C2C));
 
   printf("...uploading to GPU and padding convolution kernel and input data\n");
-  checkCudaErrors(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
+  HIPCHECK(hipMemcpy(d_Data, h_Data, dataH * dataW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemcpy(d_Kernel, h_Kernel,
+  HIPCHECK(hipMemcpy(d_Kernel, h_Kernel,
                              kernelH * kernelW * sizeof(float),
                              hipMemcpyHostToDevice));
-  checkCudaErrors(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
-  checkCudaErrors(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedData, 0, fftH * fftW * sizeof(float)));
+  HIPCHECK(hipMemset(d_PaddedKernel, 0, fftH * fftW * sizeof(float)));
 
   padDataClampToBorder(d_PaddedData, d_Data, fftH, fftW, dataH, dataW, kernelH,
                        kernelW, kernelY, kernelX);
@@ -478,29 +478,29 @@ bool test2(void) {
   // Not including kernel transformation into time measurement,
   // since convolution kernel is not changed very frequently
   printf("...transforming convolution kernel\n");
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedKernel,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedKernel,
                                (hipfftComplex *)d_KernelSpectrum0, FFT_DIR));
 
   printf("...running GPU FFT convolution: ");
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkResetTimer(&hTimer);
   sdkStartTimer(&hTimer);
 
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedData,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_PaddedData,
                                (hipfftComplex *)d_DataSpectrum0, FFT_DIR));
   spProcess2D(d_DataSpectrum0, d_DataSpectrum0, d_KernelSpectrum0, fftH,
               fftW / 2, FFT_DIR);
-  checkCudaErrors(hipfftExecC2C(fftPlan, (hipfftComplex *)d_DataSpectrum0,
+  HIPCHECK(hipfftExecC2C(fftPlan, (hipfftComplex *)d_DataSpectrum0,
                                (hipfftComplex *)d_PaddedData, -FFT_DIR));
 
-  checkCudaErrors(hipDeviceSynchronize());
+  HIPCHECK(hipDeviceSynchronize());
   sdkStopTimer(&hTimer);
   double gpuTime = sdkGetTimerValue(&hTimer);
   printf("%f MPix/s (%f ms)\n",
          (double)dataH * (double)dataW * 1e-6 / (gpuTime * 0.001), gpuTime);
 
   printf("...reading back GPU FFT results\n");
-  checkCudaErrors(hipMemcpy(h_ResultGPU, d_PaddedData,
+  HIPCHECK(hipMemcpy(h_ResultGPU, d_PaddedData,
                              fftH * fftW * sizeof(float),
                              hipMemcpyDeviceToHost));
 
@@ -536,14 +536,14 @@ bool test2(void) {
 
   printf("...shutting down\n");
   sdkDeleteTimer(&hTimer);
-  checkCudaErrors(hipfftDestroy(fftPlan));
-
-  checkCudaErrors(hipFree(d_KernelSpectrum0));
-  checkCudaErrors(hipFree(d_DataSpectrum0));
-  checkCudaErrors(hipFree(d_PaddedKernel));
-  checkCudaErrors(hipFree(d_PaddedData));
-  checkCudaErrors(hipFree(d_Kernel));
-  checkCudaErrors(hipFree(d_Data));
+  HIPCHECK(hipfftDestroy(fftPlan));
+
+  HIPCHECK(hipFree(d_KernelSpectrum0));
+  HIPCHECK(hipFree(d_DataSpectrum0));
+  HIPCHECK(hipFree(d_PaddedKernel));
+  HIPCHECK(hipFree(d_PaddedData));
+  HIPCHECK(hipFree(d_Kernel));
+  HIPCHECK(hipFree(d_Data));
 
   free(h_ResultGPU);
   free(h_ResultCPU);
diff --git a/src/samples/Samples/5_Domain_Specific/quasirandomGenerator_nvrtc/quasirandomGenerator_kernel.cu.hip b/src/samples/Samples/5_Domain_Specific/quasirandomGenerator_nvrtc/quasirandomGenerator_kernel.cu.hip
index a9fb59a..1e51076 100644
--- a/src/samples/Samples/5_Domain_Specific/quasirandomGenerator_nvrtc/quasirandomGenerator_kernel.cu.hip
+++ b/src/samples/Samples/5_Domain_Specific/quasirandomGenerator_nvrtc/quasirandomGenerator_kernel.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
