diff --git a/src/samples/Samples/0_Introduction/simpleAWBarrier/simpleAWBarrier.cu.hip b/src/samples/Samples/0_Introduction/simpleAWBarrier/simpleAWBarrier.cu.hip
index 653c009..097e148 100644
--- a/src/samples/Samples/0_Introduction/simpleAWBarrier/simpleAWBarrier.cu.hip
+++ b/src/samples/Samples/0_Introduction/simpleAWBarrier/simpleAWBarrier.cu.hip
@@ -31,14 +31,14 @@
 
 // Includes CUDA
 #include <hip/hip_runtime.h>
-#include "cuda/barrier"
+#include <cuda/barrier>
 #include <hip/hip_cooperative_groups.h>
 
 // Utilities and timing functions
-#include "helper_functions.h"  // includes hip/hip_runtime.h and hip/hip_runtime_api.h
+#include <helper_functions.h>  // includes hip/hip_runtime.h and hip/hip_runtime_api.h
 
 // CUDA helper functions
-#include "helper_cuda_hipified.h"  // helper functions for CUDA error check
+#include <helper_cuda.h>  // helper functions for CUDA error check
 
 namespace cg = cooperative_groups;
 
diff --git a/src/samples/Samples/5_Domain_Specific/quasirandomGenerator/quasirandomGenerator_kernel.cu.hip b/src/samples/Samples/5_Domain_Specific/quasirandomGenerator/quasirandomGenerator_kernel.cu.hip
index 80e373f..019f3f7 100644
--- a/src/samples/Samples/5_Domain_Specific/quasirandomGenerator/quasirandomGenerator_kernel.cu.hip
+++ b/src/samples/Samples/5_Domain_Specific/quasirandomGenerator/quasirandomGenerator_kernel.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -29,10 +30,8 @@
 #define QUASIRANDOMGENERATOR_KERNEL_CUH
 
 #include <stdio.h>
-#include "rocprofiler.h"
-#include "HIPCHECK.h"
 #include <stdlib.h>
-#include <helper_cuda.h>
+#include "helper_cuda_hipified.h"
 #include "quasirandomGenerator_common.h"
 
 // Fast integer multiplication
@@ -66,8 +65,8 @@ static __global__ void quasirandomGeneratorKernel(float *d_Output,
 // Table initialization routine
 extern "C" void initTableGPU(
     unsigned int tableCPU[QRNG_DIMENSIONS][QRNG_RESOLUTION]) {
-  HIP_SYMBOL(c_Table)(hipMemcpyToSymbol(
-      c_Table, tableCPU,
+  checkCudaErrors(hipMemcpyToSymbol(HIP_SYMBOL(
+      c_Table), tableCPU,
       QRNG_DIMENSIONS * QRNG_RESOLUTION * sizeof(unsigned int)));
 }
 
