diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large.cuh b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large.cuh
index 2eaba7b..c7e1d80 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large.cuh
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large.cuh
@@ -30,7 +30,7 @@
 
 #ifndef _BISECT_KERNEL_LARGE_H_
 #define _BISECT_KERNEL_LARGE_H_
-#include <cooperative_groups.h>
+#include <hip/hip_cooperative_groups.h>
 
 namespace cg = cooperative_groups;
 // includes, project
@@ -38,7 +38,7 @@ namespace cg = cooperative_groups;
 #include "util.h"
 
 // additional kernel
-#include "bisect_util.cu"
+#include "bisect_util.cu.hip"
 
 // declaration, forward
 
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_multi.cuh b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_multi.cuh
index e7895fe..f6e6dcd 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_multi.cuh
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_multi.cuh
@@ -32,7 +32,7 @@
 #ifndef _BISECT_KERNEL_LARGE_MULTI_H_
 #define _BISECT_KERNEL_LARGE_MULTI_H_
 
-#include <cooperative_groups.h>
+#include <hip/hip_cooperative_groups.h>
 
 namespace cg = cooperative_groups;
 // includes, project
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_onei.cuh b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_onei.cuh
index 00b2d68..2425109 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_onei.cuh
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_large_onei.cuh
@@ -32,7 +32,7 @@
 #ifndef _BISECT_KERNEL_LARGE_ONEI_H_
 #define _BISECT_KERNEL_LARGE_ONEI_H_
 
-#include <cooperative_groups.h>
+#include <hip/hip_cooperative_groups.h>
 
 namespace cg = cooperative_groups;
 
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_small.cuh b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_small.cuh
index 1c01ec6..af20257 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_small.cuh
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_kernel_small.cuh
@@ -30,8 +30,8 @@
 #ifndef _BISECT_KERNEL_SMALL_H_
 #define _BISECT_KERNEL_SMALL_H_
 
-#include <cooperative_groups.h>
-
+//#include <cooperative_groups.h>
+#include <hip/hip_cooperative_groups.h>
 namespace cg = cooperative_groups;
 
 // includes, project
@@ -39,7 +39,7 @@ namespace cg = cooperative_groups;
 #include "util.h"
 
 // additional kernel
-#include "bisect_util.cu"
+#include "bisect_util.cu.hip"
 
 ////////////////////////////////////////////////////////////////////////////////
 //! Bisection to find eigenvalues of a real, symmetric, and tridiagonal matrix
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_large.cu.hip b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_large.cu.hip
index e0ace59..0d8ff2f 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_large.cu.hip
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_large.cu.hip
@@ -40,7 +40,7 @@
 
 // includes, project
 #include "helper_functions.h"
-#include "helper_cuda.h"
+#include "helper_cuda_hipified.h"
 #include "config.h"
 #include "structs.h"
 #include "util.h"
@@ -370,12 +370,3 @@ bool processResultDataLargeMatrix(const InputData &input,
 
   return bCompareResult;
 }
-e, eigenvals, mat_size, tolerance) == true) {
-      bCompareResult = true;
-    } else {
-      bCompareResult = false;
-    }
-
-    free(ref_path);
-    free(reference);
-  }
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_small.cu.hip b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_small.cu.hip
index 1ba4622..aa1f8a5 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_small.cu.hip
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_small.cu.hip
@@ -40,7 +40,7 @@
 
 // includes, project
 #include "helper_functions.h"
-#include "helper_cuda.h"
+#include "helper_cuda_hipified.h"
 #include "config.h"
 #include "structs.h"
 #include "matlab.h"
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_util.cu.hip b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_util.cu.hip
index d198a1d..1061c2a 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_util.cu.hip
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/bisect_util.cu.hip
@@ -30,6 +30,7 @@
 #ifndef _BISECT_UTIL_H_
 #define _BISECT_UTIL_H_
 
+#include <hip/hip_runtime.h>
 #include <hip/hip_cooperative_groups.h>
 
 namespace cg = cooperative_groups;
@@ -218,7 +219,7 @@ __device__ inline unsigned int computeNumSmallerEigenvalsLarge(
     if (tid < num_intervals_active) {
       // perform (optimized) Gaussian elimination to determine the number
       // of eigenvalues that are smaller than n
-      for (unsigned int k = 0; k < min(rem, blockDim.x); ++k) {
+      for (unsigned int k = 0; k < min((int)rem, (int)blockDim.x); ++k) {
         delta = s_d[k] - x - (s_s[k] * s_s[k]) / delta;
         // delta = (abs( delta) < (1.0e-10)) ? -(1.0e-10) : delta;
         count += (delta < 0) ? 1 : 0;
diff --git a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/util.h b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/util.h
index 2d43b77..6750c0c 100644
--- a/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/util.h
+++ b/src/samples/Samples/2_Concepts_and_Techniques/eigenvalues/util.h
@@ -45,7 +45,7 @@ inline void freePtr(T *&ptr) {
 //! Minimum
 ////////////////////////////////////////////////////////////////////////////////
 template <class T>
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__
     __device__
 #endif
@@ -59,7 +59,7 @@ __host__
 //! Maximum
 ////////////////////////////////////////////////////////////////////////////////
 template <class T>
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__
     __device__
 #endif
@@ -73,7 +73,7 @@ __host__
 //! Sign of number (integer data type)
 ////////////////////////////////////////////////////////////////////////////////
 template <class T>
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__
     __device__
 #endif
@@ -85,7 +85,7 @@ __host__
 ////////////////////////////////////////////////////////////////////////////////
 //! Sign of number (float)
 ////////////////////////////////////////////////////////////////////////////////
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__ __device__
 #endif
     inline float
@@ -96,7 +96,7 @@ __host__ __device__
 ////////////////////////////////////////////////////////////////////////////////
 //! Sign of number (double)
 ////////////////////////////////////////////////////////////////////////////////
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__ __device__
 #endif
     inline double
@@ -108,7 +108,7 @@ __host__ __device__
 //! Swap \a lhs and \a rhs
 ////////////////////////////////////////////////////////////////////////////////
 template <class T>
-#ifdef __CUDACC__
+#ifdef __HIPCC__
 __host__ __device__
 #endif
     void
