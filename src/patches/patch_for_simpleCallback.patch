diff --git a/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu b/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu
index 088c674..65de1ca 100644
--- a/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu
+++ b/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu
@@ -43,8 +43,8 @@
 #include <stdio.h>
 
 // helper functions and utilities to work with CUDA
-#include <helper_functions.h>
-#include <helper_cuda.h>
+#include "helper_functions.h"
+#include "helper_cuda_hipified.h"
 
 #include "multithreading.h"
 
diff --git a/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu.hip b/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu.hip
index 3a32418..55f896f 100644
--- a/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu.hip
+++ b/src/samples/Samples/0_Introduction/simpleCallback/simpleCallback.cu.hip
@@ -1,3 +1,4 @@
+#include "hip/hip_runtime.h"
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,24 +41,21 @@
  */
 
 // System includes
-
-#include <hip/hip_runtime.h>
 #include <stdio.h>
-//#include "rocprofiler.h"
-#include "HIPCHECK.h"
 
 // helper functions and utilities to work with CUDA
-#include <helper_functions.h>
+#include "helper_functions.h"
 #include "helper_cuda_hipified.h"
-
+#include <hip/hip_runtime_api.h>
 #include "multithreading.h"
-
+#include "HIPCHECK.h"
 const int N_workloads = 8;
 const int N_elements_per_workload = 100000;
 
 CUTBarrier thread_barrier;
 
-void (CUDART_CB* myStreamCallback)(hipStream_t event, hipError_t status, void *data);
+void myStreamCallback(hipStream_t event, hipError_t status,
+                                void *data);
 
 struct heterogeneous_workload {
   int id;
@@ -86,7 +84,7 @@ CUT_THREADPROC launch(void *void_arg) {
   HIPCHECK(hipStreamCreate(&workload->stream));
   HIPCHECK(
       hipMalloc(&workload->d_data, N_elements_per_workload * sizeof(int)));
-  HIPCHECK(hipHostAlloc(&workload->h_data,
+  HIPCHECK(hipHostMalloc(&workload->h_data,
                                 N_elements_per_workload * sizeof(int),
                                 hipHostMallocPortable));
 
@@ -123,7 +121,7 @@ CUT_THREADPROC postprocess(void *void_arg) {
   // ... GPU is done with processing, continue on new CPU thread...
 
   // Select GPU for this CPU thread
-  HIPCHECK(hipSetDevice(workload->cudaDeviceID));
+  checkCudaErrors(hipSetDevice(workload->cudaDeviceID));
 
   // CPU thread consumes results from GPU
   workload->success = true;
@@ -143,7 +141,8 @@ CUT_THREADPROC postprocess(void *void_arg) {
   CUT_THREADEND;
 }
 
-void (CUDART_CB* myStreamCallback)(hipStream_t stream, hipError_t status, void *data) {
+void myStreamCallback(hipStream_t stream, hipError_t status,
+                                void *data) {
   // Check status of GPU after stream operations are done
   HIPCHECK(status);
 
@@ -157,7 +156,7 @@ int main(int argc, char **argv) {
 
   printf("Starting simpleCallback\n");
 
-  HIPCHECK(hipGetDeviceCount(&N_gpus));
+  checkCudaErrors(hipGetDeviceCount(&N_gpus));
   printf("Found %d CUDA capable GPUs\n", N_gpus);
 
   if (N_gpus > 32) {
