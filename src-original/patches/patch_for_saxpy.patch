diff --git a/src/samples/Common/helper_cuda_hipified.h b/src/samples/Common/helper_cuda_hipified.h
index e47b6f3..bc64004 100755
--- a/src/samples/Common/helper_cuda_hipified.h
+++ b/src/samples/Common/helper_cuda_hipified.h
@@ -33,6 +33,7 @@
 
 #pragma once
 #include <hip/hip_runtime.h>
+#include <hip/hip_runtime_api.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -62,7 +63,8 @@ static const char *_cudaGetErrorEnum(hipError_t error) {
 static const char *_cudaGetErrorEnum1(hipError_t error) {
   static char unknown[] = "<unknown>";
   const char *ret = NULL;
-  hipGetErrorName(error, &ret);
+  //hipGetErrorName(error, &ret);
+  hipGetErrorName(error);
   return ret ? ret : unknown;
 }
 #endif
diff --git a/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/compMalloc_hipified.cpp b/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/compMalloc_hipified.cpp
index cc0ad29..1025437 100755
--- a/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/compMalloc_hipified.cpp
+++ b/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/compMalloc_hipified.cpp
@@ -43,7 +43,7 @@ hipError_t setProp(hipMemAllocationProp *prop, bool UseCompressibleMemory)
     prop->location.id = currentDevice;
 
     if (UseCompressibleMemory)
-        prop->allocFlags.compressionType = CU_MEM_ALLOCATION_COMP_GENERIC;
+       // prop->allocFlags.compressionType = CU_MEM_ALLOCATION_COMP_GENERIC;
 
     return hipSuccess;
 }
@@ -72,10 +72,10 @@ hipError_t allocateCompressible(void **adr, size_t size, bool UseCompressibleMem
     if (UseCompressibleMemory) {
         hipMemAllocationProp allocationProp = {};
         hipMemGetAllocationPropertiesFromHandle(&allocationProp, allocationHandle);
-        if (allocationProp.allocFlags.compressionType != CU_MEM_ALLOCATION_COMP_GENERIC) {
-            printf("Could not allocate compressible memory... so waiving execution\n");
-            exit(EXIT_WAIVED);
-        }
+       // if (allocationProp.allocFlags.compressionType != CU_MEM_ALLOCATION_COMP_GENERIC) {
+       //     printf("Could not allocate compressible memory... so waiving execution\n");
+       //     exit(EXIT_WAIVED);
+       // }
     }
 
     if (hipMemMap(dptr, size, 0, allocationHandle, 0) != hipSuccess)
diff --git a/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/saxpy.cu.hip b/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/saxpy.cu.hip
index dddd613..13f9981 100755
--- a/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/saxpy.cu.hip
+++ b/src/samples/Samples/3_CUDA_Features/cudaCompressibleMemory/saxpy.cu.hip
@@ -1,4 +1,4 @@
-#include "hip/hip_runtime.h"
+
 /* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -35,8 +35,9 @@
 #include <stdio.h>
 #include <hip/hip_runtime.h>
 #define CUDA_DRIVER_API
-#include "helper_cuda.h"
-#include "compMalloc.h"
+#include "helper_cuda_hipified.h"
+#include "HIPCHECK.h"
+#include "compMalloc_hipified.h"
 
 __global__ void saxpy(const float a, const float4 *x, const float4 *y, float4 *z, const size_t n)
 {
@@ -123,18 +124,18 @@ int main(int argc, char **argv)
 
     // Check that the selected device supports virtual memory management
     int vmm_supported = -1;
-    HIPCHECK(hipDeviceGetAttribute(&vmm_supported,
-                          CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED,
-                          currentDevice));
+   // HIPCHECK(hipDeviceGetAttribute(&vmm_supported,
+   //                       CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED,
+   //                       currentDevice));
     if (vmm_supported == 0) {
         printf("Device %d doesn't support Virtual Memory Management, waiving the execution.\n", currentDevice);
         exit(EXIT_WAIVED);
     }
 
     int isCompressionAvailable;
-    HIPCHECK(hipDeviceGetAttribute(&isCompressionAvailable,
-                             CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED,
-                             currentDevice));
+   // HIPCHECK(hipDeviceGetAttribute(&isCompressionAvailable,
+   //                          CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED,
+   //                          currentDevice));
     if (isCompressionAvailable == 0)
     {
         printf("Device %d doesn't support Generic memory compression, waiving the execution.\n", currentDevice);
@@ -196,9 +197,4 @@ int main(int argc, char **argv)
     printf("\nNOTE: The CUDA Samples are not meant for performance measurements. "
       "Results may vary when GPU Boost is enabled.\n");
     return EXIT_SUCCESS;
-}ompressible(z, size, false));
-
-    printf("\nNOTE: The CUDA Samples are not meant for performance measurements. "
-      "Results may vary when GPU Boost is enabled.\n");
-    return EXIT_SUCCESS;
-}
\ No newline at end of file
+}
