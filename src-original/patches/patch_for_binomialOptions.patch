diff --git a/src/samples/Samples/5_Domain_Specific/SobelFilter/SobelFilter_kernels.cu.hip b/src/samples/Samples/5_Domain_Specific/SobelFilter/SobelFilter_kernels.cu.hip
index e69de29..e507344 100644
--- a/src/samples/Samples/5_Domain_Specific/SobelFilter/SobelFilter_kernels.cu.hip
+++ b/src/samples/Samples/5_Domain_Specific/SobelFilter/SobelFilter_kernels.cu.hip
@@ -0,0 +1,293 @@
+#include "hip/hip_runtime.h"
+/* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *  * Neither the name of NVIDIA CORPORATION nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <hip/hip_runtime.h>
+#include <hip/hip_cooperative_groups.h>
+
+namespace cg = cooperative_groups;
+
+#include <helper_string.h>
+
+#include "SobelFilter_kernels.h"
+
+// Texture object for reading image
+hipTextureObject_t texObject;
+extern __shared__ unsigned char LocalBlock[];
+static hipArray *array = NULL;
+
+#define RADIUS 1
+
+#ifdef FIXED_BLOCKWIDTH
+#define BlockWidth 80
+#define SharedPitch 384
+#endif
+
+// This will output the proper CUDA error strings in the event that a CUDA host
+// call returns an error
+#define checkCudaErrors(err) __checkCudaErrors(err, __FILE__, __LINE__)
+
+inline void __checkCudaErrors(hipError_t err, const char *file, const int line) {
+  if (hipSuccess != err) {
+    fprintf(stderr, "%s(%i) : CUDA Runtime API error %d: %s.\n", file, line,
+            (int)err, hipGetErrorString(err));
+    exit(EXIT_FAILURE);
+  }
+}
+
+__device__ unsigned char ComputeSobel(unsigned char ul,  // upper left
+                                      unsigned char um,  // upper middle
+                                      unsigned char ur,  // upper right
+                                      unsigned char ml,  // middle left
+                                      unsigned char mm,  // middle (unused)
+                                      unsigned char mr,  // middle right
+                                      unsigned char ll,  // lower left
+                                      unsigned char lm,  // lower middle
+                                      unsigned char lr,  // lower right
+                                      float fScale) {
+  short Horz = ur + 2 * mr + lr - ul - 2 * ml - ll;
+  short Vert = ul + 2 * um + ur - ll - 2 * lm - lr;
+  short Sum = (short)(fScale * (abs((int)Horz) + abs((int)Vert)));
+
+  if (Sum < 0) {
+    return 0;
+  } else if (Sum > 0xff) {
+    return 0xff;
+  }
+
+  return (unsigned char)Sum;
+}
+
+__global__ void SobelShared(uchar4 *pSobelOriginal, unsigned short SobelPitch,
+#ifndef FIXED_BLOCKWIDTH
+                            short BlockWidth, short SharedPitch,
+#endif
+                            short w, short h, float fScale,
+                            hipTextureObject_t tex) {
+  // Handle to thread block group
+  cg::thread_block cta = cg::this_thread_block();
+  short u = 4 * blockIdx.x * BlockWidth;
+  short v = blockIdx.y * blockDim.y + threadIdx.y;
+  short ib;
+
+  int SharedIdx = threadIdx.y * SharedPitch;
+
+  for (ib = threadIdx.x; ib < BlockWidth + 2 * RADIUS; ib += blockDim.x) {
+    LocalBlock[SharedIdx + 4 * ib + 0] = tex2D<unsigned char>(
+        tex, (float)(u + 4 * ib - RADIUS + 0), (float)(v - RADIUS));
+    LocalBlock[SharedIdx + 4 * ib + 1] = tex2D<unsigned char>(
+        tex, (float)(u + 4 * ib - RADIUS + 1), (float)(v - RADIUS));
+    LocalBlock[SharedIdx + 4 * ib + 2] = tex2D<unsigned char>(
+        tex, (float)(u + 4 * ib - RADIUS + 2), (float)(v - RADIUS));
+    LocalBlock[SharedIdx + 4 * ib + 3] = tex2D<unsigned char>(
+        tex, (float)(u + 4 * ib - RADIUS + 3), (float)(v - RADIUS));
+  }
+
+  if (threadIdx.y < RADIUS * 2) {
+    //
+    // copy trailing RADIUS*2 rows of pixels into shared
+    //
+    SharedIdx = (blockDim.y + threadIdx.y) * SharedPitch;
+
+    for (ib = threadIdx.x; ib < BlockWidth + 2 * RADIUS; ib += blockDim.x) {
+      LocalBlock[SharedIdx + 4 * ib + 0] =
+          tex2D<unsigned char>(tex, (float)(u + 4 * ib - RADIUS + 0),
+                               (float)(v + blockDim.y - RADIUS));
+      LocalBlock[SharedIdx + 4 * ib + 1] =
+          tex2D<unsigned char>(tex, (float)(u + 4 * ib - RADIUS + 1),
+                               (float)(v + blockDim.y - RADIUS));
+      LocalBlock[SharedIdx + 4 * ib + 2] =
+          tex2D<unsigned char>(tex, (float)(u + 4 * ib - RADIUS + 2),
+                               (float)(v + blockDim.y - RADIUS));
+      LocalBlock[SharedIdx + 4 * ib + 3] =
+          tex2D<unsigned char>(tex, (float)(u + 4 * ib - RADIUS + 3),
+                               (float)(v + blockDim.y - RADIUS));
+    }
+  }
+
+  cg::sync(cta);
+
+  u >>= 2;  // index as uchar4 from here
+  uchar4 *pSobel = (uchar4 *)(((char *)pSobelOriginal) + v * SobelPitch);
+  SharedIdx = threadIdx.y * SharedPitch;
+
+  for (ib = threadIdx.x; ib < BlockWidth; ib += blockDim.x) {
+    unsigned char pix00 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 0];
+    unsigned char pix01 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 1];
+    unsigned char pix02 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 2];
+    unsigned char pix10 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 0];
+    unsigned char pix11 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 1];
+    unsigned char pix12 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 2];
+    unsigned char pix20 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 0];
+    unsigned char pix21 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 1];
+    unsigned char pix22 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 2];
+
+    uchar4 out;
+
+    out.x = ComputeSobel(pix00, pix01, pix02, pix10, pix11, pix12, pix20, pix21,
+                         pix22, fScale);
+
+    pix00 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 3];
+    pix10 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 3];
+    pix20 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 3];
+    out.y = ComputeSobel(pix01, pix02, pix00, pix11, pix12, pix10, pix21, pix22,
+                         pix20, fScale);
+
+    pix01 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 4];
+    pix11 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 4];
+    pix21 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 4];
+    out.z = ComputeSobel(pix02, pix00, pix01, pix12, pix10, pix11, pix22, pix20,
+                         pix21, fScale);
+
+    pix02 = LocalBlock[SharedIdx + 4 * ib + 0 * SharedPitch + 5];
+    pix12 = LocalBlock[SharedIdx + 4 * ib + 1 * SharedPitch + 5];
+    pix22 = LocalBlock[SharedIdx + 4 * ib + 2 * SharedPitch + 5];
+    out.w = ComputeSobel(pix00, pix01, pix02, pix10, pix11, pix12, pix20, pix21,
+                         pix22, fScale);
+
+    if (u + ib < w / 4 && v < h) {
+      pSobel[u + ib] = out;
+    }
+  }
+
+  cg::sync(cta);
+}
+
+__global__ void SobelCopyImage(Pixel *pSobelOriginal, unsigned int Pitch, int w,
+                               int h, float fscale, hipTextureObject_t tex) {
+  unsigned char *pSobel =
+      (unsigned char *)(((char *)pSobelOriginal) + blockIdx.x * Pitch);
+
+  for (int i = threadIdx.x; i < w; i += blockDim.x) {
+    pSobel[i] = min(
+        max((tex2D<unsigned char>(tex, (float)i, (float)blockIdx.x) * fscale),
+            0.f),
+        255.f);
+  }
+}
+
+__global__ void SobelTex(Pixel *pSobelOriginal, unsigned int Pitch, int w,
+                         int h, float fScale, hipTextureObject_t tex) {
+  unsigned char *pSobel =
+      (unsigned char *)(((char *)pSobelOriginal) + blockIdx.x * Pitch);
+
+  for (int i = threadIdx.x; i < w; i += blockDim.x) {
+    unsigned char pix00 =
+        tex2D<unsigned char>(tex, (float)i - 1, (float)blockIdx.x - 1);
+    unsigned char pix01 =
+        tex2D<unsigned char>(tex, (float)i + 0, (float)blockIdx.x - 1);
+    unsigned char pix02 =
+        tex2D<unsigned char>(tex, (float)i + 1, (float)blockIdx.x - 1);
+    unsigned char pix10 =
+        tex2D<unsigned char>(tex, (float)i - 1, (float)blockIdx.x + 0);
+    unsigned char pix11 =
+        tex2D<unsigned char>(tex, (float)i + 0, (float)blockIdx.x + 0);
+    unsigned char pix12 =
+        tex2D<unsigned char>(tex, (float)i + 1, (float)blockIdx.x + 0);
+    unsigned char pix20 =
+        tex2D<unsigned char>(tex, (float)i - 1, (float)blockIdx.x + 1);
+    unsigned char pix21 =
+        tex2D<unsigned char>(tex, (float)i + 0, (float)blockIdx.x + 1);
+    unsigned char pix22 =
+        tex2D<unsigned char>(tex, (float)i + 1, (float)blockIdx.x + 1);
+    pSobel[i] = ComputeSobel(pix00, pix01, pix02, pix10, pix11, pix12, pix20,
+                             pix21, pix22, fScale);
+  }
+}
+
+extern "C" void setupTexture(int iw, int ih, Pixel *data, int Bpp) {
+  hipChannelFormatDesc desc;
+
+  if (Bpp == 1) {
+    desc = hipCreateChannelDesc<unsigned char>();
+  } else {
+    desc = hipCreateChannelDesc<uchar4>();
+  }
+
+  checkCudaErrors(hipMallocArray(&array, &desc, iw, ih));
+  checkCudaErrors(hipMemcpy2DToArray(
+      array, 0, 0, data, iw * Bpp * sizeof(Pixel), iw * Bpp * sizeof(Pixel), ih,
+      hipMemcpyHostToDevice));
+
+  hipResourceDesc texRes;
+  memset(&texRes, 0, sizeof(hipResourceDesc));
+
+  texRes.resType = hipResourceTypeArray;
+  texRes.res.array.array = array;
+
+  hipTextureDesc texDescr;
+  memset(&texDescr, 0, sizeof(hipTextureDesc));
+
+  texDescr.normalizedCoords = false;
+  texDescr.filterMode = hipFilterModePoint;
+  texDescr.addressMode[0] = hipAddressModeWrap;
+  texDescr.readMode = hipReadModeElementType;
+
+  checkCudaErrors(
+      hipCreateTextureObject(&texObject, &texRes, &texDescr, NULL));
+}
+
+extern "C" void deleteTexture(void) {
+  checkCudaErrors(hipFreeArray(array));
+  checkCudaErrors(hipDestroyTextureObject(texObject));
+}
+
+// Wrapper for the __global__ call that sets up the texture and threads
+extern "C" void sobelFilter(Pixel *odata, int iw, int ih,
+                            enum SobelDisplayMode mode, float fScale) {
+  switch (mode) {
+    case SOBELDISPLAY_IMAGE:
+      SobelCopyImage<<<ih, 384>>>(odata, iw, iw, ih, fScale, texObject);
+      break;
+
+    case SOBELDISPLAY_SOBELTEX:
+      SobelTex<<<ih, 384>>>(odata, iw, iw, ih, fScale, texObject);
+      break;
+
+    case SOBELDISPLAY_SOBELSHARED: {
+      dim3 threads(16, 4);
+#ifndef FIXED_BLOCKWIDTH
+      int BlockWidth = 80;  // must be divisible by 16 for coalescing
+#endif
+      dim3 blocks = dim3(iw / (4 * BlockWidth) + (0 != iw % (4 * BlockWidth)),
+                         ih / threads.y + (0 != ih % threads.y));
+      int SharedPitch = ~0x3f & (4 * (BlockWidth + 2 * RADIUS) + 0x3f);
+      int sharedMem = SharedPitch * (threads.y + 2 * RADIUS);
+
+      // for the shared kernel, width must be divisible by 4
+      iw &= ~3;
+
+      SobelShared<<<blocks, threads, sharedMem>>>((uchar4 *)odata, iw,
+#ifndef FIXED_BLOCKWIDTH
+                                                  BlockWidth, SharedPitch,
+#endif
+                                                  iw, ih, fScale, texObject);
+    } break;
+  }
+}
diff --git a/src/samples/Samples/5_Domain_Specific/binomialOptions/binomialOptions_kernel.cu.hip b/src/samples/Samples/5_Domain_Specific/binomialOptions/binomialOptions_kernel.cu.hip
index e69de29..ee61764 100644
--- a/src/samples/Samples/5_Domain_Specific/binomialOptions/binomialOptions_kernel.cu.hip
+++ b/src/samples/Samples/5_Domain_Specific/binomialOptions/binomialOptions_kernel.cu.hip
@@ -0,0 +1,158 @@
+#include "hip/hip_runtime.h"
+/* Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *  * Neither the name of NVIDIA CORPORATION nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+////////////////////////////////////////////////////////////////////////////////
+// Global types and parameters
+////////////////////////////////////////////////////////////////////////////////
+#include <stdio.h>
+#include <stdlib.h>
+#include <hip/hip_cooperative_groups.h>
+
+namespace cg = cooperative_groups;
+
+#include "helper_cuda_hipified.h"
+#include "binomialOptions_common.h"
+#include "realtype.h"
+
+// Preprocessed input option data
+typedef struct {
+  real S;
+  real X;
+  real vDt;
+  real puByDf;
+  real pdByDf;
+} __TOptionData;
+static __constant__ __TOptionData d_OptionData[MAX_OPTIONS];
+static __device__ real d_CallValue[MAX_OPTIONS];
+
+////////////////////////////////////////////////////////////////////////////////
+// Overloaded shortcut functions for different precision modes
+////////////////////////////////////////////////////////////////////////////////
+#ifndef DOUBLE_PRECISION
+__device__ inline float expiryCallValue(float S, float X, float vDt, int i) {
+  float d = S * __expf(vDt * (2.0f * i - NUM_STEPS)) - X;
+  return (d > 0.0F) ? d : 0.0F;
+}
+#else
+__device__ inline double expiryCallValue(double S, double X, double vDt,
+                                         int i) {
+  double d = S * exp(vDt * (2.0 * i - NUM_STEPS)) - X;
+  return (d > 0.0) ? d : 0.0;
+}
+#endif
+
+////////////////////////////////////////////////////////////////////////////////
+// GPU kernel
+////////////////////////////////////////////////////////////////////////////////
+#define THREADBLOCK_SIZE 128
+#define ELEMS_PER_THREAD (NUM_STEPS / THREADBLOCK_SIZE)
+#if NUM_STEPS % THREADBLOCK_SIZE
+#error Bad constants
+#endif
+
+__global__ void binomialOptionsKernel() {
+  // Handle to thread block group
+  cg::thread_block cta = cg::this_thread_block();
+  __shared__ real call_exchange[THREADBLOCK_SIZE + 1];
+
+  const int tid = threadIdx.x;
+  const real S = d_OptionData[blockIdx.x].S;
+  const real X = d_OptionData[blockIdx.x].X;
+  const real vDt = d_OptionData[blockIdx.x].vDt;
+  const real puByDf = d_OptionData[blockIdx.x].puByDf;
+  const real pdByDf = d_OptionData[blockIdx.x].pdByDf;
+
+  real call[ELEMS_PER_THREAD + 1];
+#pragma unroll
+  for (int i = 0; i < ELEMS_PER_THREAD; ++i)
+    call[i] = expiryCallValue(S, X, vDt, tid * ELEMS_PER_THREAD + i);
+
+  if (tid == 0)
+    call_exchange[THREADBLOCK_SIZE] = expiryCallValue(S, X, vDt, NUM_STEPS);
+
+  int final_it = max(0, tid * ELEMS_PER_THREAD - 1);
+
+#pragma unroll 16
+  for (int i = NUM_STEPS; i > 0; --i) {
+    call_exchange[tid] = call[0];
+    cg::sync(cta);
+    call[ELEMS_PER_THREAD] = call_exchange[tid + 1];
+    cg::sync(cta);
+
+    if (i > final_it) {
+#pragma unroll
+      for (int j = 0; j < ELEMS_PER_THREAD; ++j)
+        call[j] = puByDf * call[j + 1] + pdByDf * call[j];
+    }
+  }
+
+  if (tid == 0) {
+    d_CallValue[blockIdx.x] = call[0];
+  }
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Host-side interface to GPU binomialOptions
+////////////////////////////////////////////////////////////////////////////////
+extern "C" void binomialOptionsGPU(real *callValue, TOptionData *optionData,
+                                   int optN) {
+  __TOptionData h_OptionData[MAX_OPTIONS];
+
+  for (int i = 0; i < optN; i++) {
+    const real T = optionData[i].T;
+    const real R = optionData[i].R;
+    const real V = optionData[i].V;
+
+    const real dt = T / (real)NUM_STEPS;
+    const real vDt = V * sqrt(dt);
+    const real rDt = R * dt;
+    // Per-step interest and discount factors
+    const real If = exp(rDt);
+    const real Df = exp(-rDt);
+    // Values and pseudoprobabilities of upward and downward moves
+    const real u = exp(vDt);
+    const real d = exp(-vDt);
+    const real pu = (If - d) / (u - d);
+    const real pd = (real)1.0 - pu;
+    const real puByDf = pu * Df;
+    const real pdByDf = pd * Df;
+
+    h_OptionData[i].S = (real)optionData[i].S;
+    h_OptionData[i].X = (real)optionData[i].X;
+    h_OptionData[i].vDt = (real)vDt;
+    h_OptionData[i].puByDf = (real)puByDf;
+    h_OptionData[i].pdByDf = (real)pdByDf;
+  }
+
+  checkCudaErrors(hipMemcpyToSymbol(HIP_SYMBOL(d_OptionData), h_OptionData,
+                                     optN * sizeof(__TOptionData)));
+  binomialOptionsKernel<<<optN, THREADBLOCK_SIZE>>>();
+  getLastCudaError("binomialOptionsKernel() execution failed.\n");
+  checkCudaErrors(
+      hipMemcpyFromSymbol(callValue, HIP_SYMBOL(d_CallValue), optN * sizeof(real)));
+}
